/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "CaratProtocol.h"

@implementation Registration

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp platformId: (NSString *) platformId systemVersion: (NSString *) systemVersion systemDistribution: (NSString *) systemDistribution kernelVersion: (NSString *) kernelVersion
{
  self = [super init];
  __uuId = [uuId retain_stub];
  __uuId_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __platformId = [platformId retain_stub];
  __platformId_isset = YES;
  __systemVersion = [systemVersion retain_stub];
  __systemVersion_isset = YES;
  __systemDistribution = [systemDistribution retain_stub];
  __systemDistribution_isset = YES;
  __kernelVersion = [kernelVersion retain_stub];
  __kernelVersion_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain_stub];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"platformId"])
  {
    __platformId = [[decoder decodeObjectForKey: @"platformId"] retain_stub];
    __platformId_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemVersion"])
  {
    __systemVersion = [[decoder decodeObjectForKey: @"systemVersion"] retain_stub];
    __systemVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemDistribution"])
  {
    __systemDistribution = [[decoder decodeObjectForKey: @"systemDistribution"] retain_stub];
    __systemDistribution_isset = YES;
  }
  if ([decoder containsValueForKey: @"kernelVersion"])
  {
    __kernelVersion = [[decoder decodeObjectForKey: @"kernelVersion"] retain_stub];
    __kernelVersion_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeDouble: __timestamp forKey: @"timestamp"];
  }
  if (__platformId_isset)
  {
    [encoder encodeObject: __platformId forKey: @"platformId"];
  }
  if (__systemVersion_isset)
  {
    [encoder encodeObject: __systemVersion forKey: @"systemVersion"];
  }
  if (__systemDistribution_isset)
  {
    [encoder encodeObject: __systemDistribution forKey: @"systemDistribution"];
  }
  if (__kernelVersion_isset)
  {
    [encoder encodeObject: __kernelVersion forKey: @"kernelVersion"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uuId_isset ? 2654435761 : 0;
  if (__uuId_isset)
  {
    hash = (hash * 31) ^ [__uuId hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [@(__timestamp) hash];
  }
  hash = (hash * 31) ^ __platformId_isset ? 2654435761 : 0;
  if (__platformId_isset)
  {
    hash = (hash * 31) ^ [__platformId hash];
  }
  hash = (hash * 31) ^ __systemVersion_isset ? 2654435761 : 0;
  if (__systemVersion_isset)
  {
    hash = (hash * 31) ^ [__systemVersion hash];
  }
  hash = (hash * 31) ^ __systemDistribution_isset ? 2654435761 : 0;
  if (__systemDistribution_isset)
  {
    hash = (hash * 31) ^ [__systemDistribution hash];
  }
  hash = (hash * 31) ^ __kernelVersion_isset ? 2654435761 : 0;
  if (__kernelVersion_isset)
  {
    hash = (hash * 31) ^ [__kernelVersion hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Registration class]]) {
    return NO;
  }
  Registration *other = (Registration *)anObject;
  if ((__uuId_isset != other->__uuId_isset) ||
      (__uuId_isset && ((__uuId || other->__uuId) && ![__uuId isEqual:other->__uuId]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && (__timestamp != other->__timestamp))) {
    return NO;
  }
  if ((__platformId_isset != other->__platformId_isset) ||
      (__platformId_isset && ((__platformId || other->__platformId) && ![__platformId isEqual:other->__platformId]))) {
    return NO;
  }
  if ((__systemVersion_isset != other->__systemVersion_isset) ||
      (__systemVersion_isset && ((__systemVersion || other->__systemVersion) && ![__systemVersion isEqual:other->__systemVersion]))) {
    return NO;
  }
  if ((__systemDistribution_isset != other->__systemDistribution_isset) ||
      (__systemDistribution_isset && ((__systemDistribution || other->__systemDistribution) && ![__systemDistribution isEqual:other->__systemDistribution]))) {
    return NO;
  }
  if ((__kernelVersion_isset != other->__kernelVersion_isset) ||
      (__kernelVersion_isset && ((__kernelVersion || other->__kernelVersion) && ![__kernelVersion isEqual:other->__kernelVersion]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uuId release_stub];
  [__platformId release_stub];
  [__systemVersion release_stub];
  [__systemDistribution release_stub];
  [__kernelVersion release_stub];
  [super dealloc_stub];
}

- (NSString *) uuId {
  return [[__uuId retain_stub] autorelease_stub];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain_stub];
  [__uuId release_stub];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release_stub];
  __uuId = nil;
  __uuId_isset = NO;
}

- (double) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (NSString *) platformId {
  return [[__platformId retain_stub] autorelease_stub];
}

- (void) setPlatformId: (NSString *) platformId {
  [platformId retain_stub];
  [__platformId release_stub];
  __platformId = platformId;
  __platformId_isset = YES;
}

- (BOOL) platformIdIsSet {
  return __platformId_isset;
}

- (void) unsetPlatformId {
  [__platformId release_stub];
  __platformId = nil;
  __platformId_isset = NO;
}

- (NSString *) systemVersion {
  return [[__systemVersion retain_stub] autorelease_stub];
}

- (void) setSystemVersion: (NSString *) systemVersion {
  [systemVersion retain_stub];
  [__systemVersion release_stub];
  __systemVersion = systemVersion;
  __systemVersion_isset = YES;
}

- (BOOL) systemVersionIsSet {
  return __systemVersion_isset;
}

- (void) unsetSystemVersion {
  [__systemVersion release_stub];
  __systemVersion = nil;
  __systemVersion_isset = NO;
}

- (NSString *) systemDistribution {
  return [[__systemDistribution retain_stub] autorelease_stub];
}

- (void) setSystemDistribution: (NSString *) systemDistribution {
  [systemDistribution retain_stub];
  [__systemDistribution release_stub];
  __systemDistribution = systemDistribution;
  __systemDistribution_isset = YES;
}

- (BOOL) systemDistributionIsSet {
  return __systemDistribution_isset;
}

- (void) unsetSystemDistribution {
  [__systemDistribution release_stub];
  __systemDistribution = nil;
  __systemDistribution_isset = NO;
}

- (NSString *) kernelVersion {
  return [[__kernelVersion retain_stub] autorelease_stub];
}

- (void) setKernelVersion: (NSString *) kernelVersion {
  [kernelVersion retain_stub];
  [__kernelVersion release_stub];
  __kernelVersion = kernelVersion;
  __kernelVersion_isset = YES;
}

- (BOOL) kernelVersionIsSet {
  return __kernelVersion_isset;
}

- (void) unsetKernelVersion {
  [__kernelVersion release_stub];
  __kernelVersion = nil;
  __kernelVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPlatformId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSystemVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSystemDistribution: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKernelVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Registration"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__platformId_isset) {
    if (__platformId != nil) {
      [outProtocol writeFieldBeginWithName: @"platformId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __platformId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__systemVersion_isset) {
    if (__systemVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"systemVersion" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __systemVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__systemDistribution_isset) {
    if (__systemDistribution != nil) {
      [outProtocol writeFieldBeginWithName: @"systemDistribution" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __systemDistribution];
      [outProtocol writeFieldEnd];
    }
  }
  if (__kernelVersion_isset) {
    if (__kernelVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"kernelVersion" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __kernelVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__uuId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uuId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Registration("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%f", __timestamp];
  [ms appendString: @",platformId:"];
  [ms appendFormat: @"\"%@\"", __platformId];
  [ms appendString: @",systemVersion:"];
  [ms appendFormat: @"\"%@\"", __systemVersion];
  [ms appendString: @",systemDistribution:"];
  [ms appendFormat: @"\"%@\"", __systemDistribution];
  [ms appendString: @",kernelVersion:"];
  [ms appendFormat: @"\"%@\"", __kernelVersion];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ProcessInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPId: (int32_t) pId pName: (NSString *) pName applicationLabel: (NSString *) applicationLabel isSystemApp: (BOOL) isSystemApp importance: (NSString *) importance versionName: (NSString *) versionName versionCode: (int32_t) versionCode appSignatures: (NSMutableArray *) appSignatures installationPkg: (NSString *) installationPkg
{
  self = [super init];
  __pId = pId;
  __pId_isset = YES;
  __pName = [pName retain_stub];
  __pName_isset = YES;
  __applicationLabel = [applicationLabel retain_stub];
  __applicationLabel_isset = YES;
  __isSystemApp = isSystemApp;
  __isSystemApp_isset = YES;
  __importance = [importance retain_stub];
  __importance_isset = YES;
  __versionName = [versionName retain_stub];
  __versionName_isset = YES;
  __versionCode = versionCode;
  __versionCode_isset = YES;
  __appSignatures = [appSignatures retain_stub];
  __appSignatures_isset = YES;
  __installationPkg = [installationPkg retain_stub];
  __installationPkg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"pId"])
  {
    __pId = [decoder decodeInt32ForKey: @"pId"];
    __pId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pName"])
  {
    __pName = [[decoder decodeObjectForKey: @"pName"] retain_stub];
    __pName_isset = YES;
  }
  if ([decoder containsValueForKey: @"applicationLabel"])
  {
    __applicationLabel = [[decoder decodeObjectForKey: @"applicationLabel"] retain_stub];
    __applicationLabel_isset = YES;
  }
  if ([decoder containsValueForKey: @"isSystemApp"])
  {
    __isSystemApp = [decoder decodeBoolForKey: @"isSystemApp"];
    __isSystemApp_isset = YES;
  }
  if ([decoder containsValueForKey: @"importance"])
  {
    __importance = [[decoder decodeObjectForKey: @"importance"] retain_stub];
    __importance_isset = YES;
  }
  if ([decoder containsValueForKey: @"versionName"])
  {
    __versionName = [[decoder decodeObjectForKey: @"versionName"] retain_stub];
    __versionName_isset = YES;
  }
  if ([decoder containsValueForKey: @"versionCode"])
  {
    __versionCode = [decoder decodeInt32ForKey: @"versionCode"];
    __versionCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"appSignatures"])
  {
    __appSignatures = [[decoder decodeObjectForKey: @"appSignatures"] retain_stub];
    __appSignatures_isset = YES;
  }
  if ([decoder containsValueForKey: @"installationPkg"])
  {
    __installationPkg = [[decoder decodeObjectForKey: @"installationPkg"] retain_stub];
    __installationPkg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__pId_isset)
  {
    [encoder encodeInt32: __pId forKey: @"pId"];
  }
  if (__pName_isset)
  {
    [encoder encodeObject: __pName forKey: @"pName"];
  }
  if (__applicationLabel_isset)
  {
    [encoder encodeObject: __applicationLabel forKey: @"applicationLabel"];
  }
  if (__isSystemApp_isset)
  {
    [encoder encodeBool: __isSystemApp forKey: @"isSystemApp"];
  }
  if (__importance_isset)
  {
    [encoder encodeObject: __importance forKey: @"importance"];
  }
  if (__versionName_isset)
  {
    [encoder encodeObject: __versionName forKey: @"versionName"];
  }
  if (__versionCode_isset)
  {
    [encoder encodeInt32: __versionCode forKey: @"versionCode"];
  }
  if (__appSignatures_isset)
  {
    [encoder encodeObject: __appSignatures forKey: @"appSignatures"];
  }
  if (__installationPkg_isset)
  {
    [encoder encodeObject: __installationPkg forKey: @"installationPkg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __pId_isset ? 2654435761 : 0;
  if (__pId_isset)
  {
    hash = (hash * 31) ^ [@(__pId) hash];
  }
  hash = (hash * 31) ^ __pName_isset ? 2654435761 : 0;
  if (__pName_isset)
  {
    hash = (hash * 31) ^ [__pName hash];
  }
  hash = (hash * 31) ^ __applicationLabel_isset ? 2654435761 : 0;
  if (__applicationLabel_isset)
  {
    hash = (hash * 31) ^ [__applicationLabel hash];
  }
  hash = (hash * 31) ^ __isSystemApp_isset ? 2654435761 : 0;
  if (__isSystemApp_isset)
  {
    hash = (hash * 31) ^ [@(__isSystemApp) hash];
  }
  hash = (hash * 31) ^ __importance_isset ? 2654435761 : 0;
  if (__importance_isset)
  {
    hash = (hash * 31) ^ [__importance hash];
  }
  hash = (hash * 31) ^ __versionName_isset ? 2654435761 : 0;
  if (__versionName_isset)
  {
    hash = (hash * 31) ^ [__versionName hash];
  }
  hash = (hash * 31) ^ __versionCode_isset ? 2654435761 : 0;
  if (__versionCode_isset)
  {
    hash = (hash * 31) ^ [@(__versionCode) hash];
  }
  hash = (hash * 31) ^ __appSignatures_isset ? 2654435761 : 0;
  if (__appSignatures_isset)
  {
    hash = (hash * 31) ^ [__appSignatures hash];
  }
  hash = (hash * 31) ^ __installationPkg_isset ? 2654435761 : 0;
  if (__installationPkg_isset)
  {
    hash = (hash * 31) ^ [__installationPkg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ProcessInfo class]]) {
    return NO;
  }
  ProcessInfo *other = (ProcessInfo *)anObject;
  if ((__pId_isset != other->__pId_isset) ||
      (__pId_isset && (__pId != other->__pId))) {
    return NO;
  }
  if ((__pName_isset != other->__pName_isset) ||
      (__pName_isset && ((__pName || other->__pName) && ![__pName isEqual:other->__pName]))) {
    return NO;
  }
  if ((__applicationLabel_isset != other->__applicationLabel_isset) ||
      (__applicationLabel_isset && ((__applicationLabel || other->__applicationLabel) && ![__applicationLabel isEqual:other->__applicationLabel]))) {
    return NO;
  }
  if ((__isSystemApp_isset != other->__isSystemApp_isset) ||
      (__isSystemApp_isset && (__isSystemApp != other->__isSystemApp))) {
    return NO;
  }
  if ((__importance_isset != other->__importance_isset) ||
      (__importance_isset && ((__importance || other->__importance) && ![__importance isEqual:other->__importance]))) {
    return NO;
  }
  if ((__versionName_isset != other->__versionName_isset) ||
      (__versionName_isset && ((__versionName || other->__versionName) && ![__versionName isEqual:other->__versionName]))) {
    return NO;
  }
  if ((__versionCode_isset != other->__versionCode_isset) ||
      (__versionCode_isset && (__versionCode != other->__versionCode))) {
    return NO;
  }
  if ((__appSignatures_isset != other->__appSignatures_isset) ||
      (__appSignatures_isset && ((__appSignatures || other->__appSignatures) && ![__appSignatures isEqual:other->__appSignatures]))) {
    return NO;
  }
  if ((__installationPkg_isset != other->__installationPkg_isset) ||
      (__installationPkg_isset && ((__installationPkg || other->__installationPkg) && ![__installationPkg isEqual:other->__installationPkg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__pName release_stub];
  [__applicationLabel release_stub];
  [__importance release_stub];
  [__versionName release_stub];
  [__appSignatures release_stub];
  [__installationPkg release_stub];
  [super dealloc_stub];
}

- (int32_t) pId {
  return __pId;
}

- (void) setPId: (int32_t) pId {
  __pId = pId;
  __pId_isset = YES;
}

- (BOOL) pIdIsSet {
  return __pId_isset;
}

- (void) unsetPId {
  __pId_isset = NO;
}

- (NSString *) pName {
  return [[__pName retain_stub] autorelease_stub];
}

- (void) setPName: (NSString *) pName {
  [pName retain_stub];
  [__pName release_stub];
  __pName = pName;
  __pName_isset = YES;
}

- (BOOL) pNameIsSet {
  return __pName_isset;
}

- (void) unsetPName {
  [__pName release_stub];
  __pName = nil;
  __pName_isset = NO;
}

- (NSString *) applicationLabel {
  return [[__applicationLabel retain_stub] autorelease_stub];
}

- (void) setApplicationLabel: (NSString *) applicationLabel {
  [applicationLabel retain_stub];
  [__applicationLabel release_stub];
  __applicationLabel = applicationLabel;
  __applicationLabel_isset = YES;
}

- (BOOL) applicationLabelIsSet {
  return __applicationLabel_isset;
}

- (void) unsetApplicationLabel {
  [__applicationLabel release_stub];
  __applicationLabel = nil;
  __applicationLabel_isset = NO;
}

- (BOOL) isSystemApp {
  return __isSystemApp;
}

- (void) setIsSystemApp: (BOOL) isSystemApp {
  __isSystemApp = isSystemApp;
  __isSystemApp_isset = YES;
}

- (BOOL) isSystemAppIsSet {
  return __isSystemApp_isset;
}

- (void) unsetIsSystemApp {
  __isSystemApp_isset = NO;
}

- (NSString *) importance {
  return [[__importance retain_stub] autorelease_stub];
}

- (void) setImportance: (NSString *) importance {
  [importance retain_stub];
  [__importance release_stub];
  __importance = importance;
  __importance_isset = YES;
}

- (BOOL) importanceIsSet {
  return __importance_isset;
}

- (void) unsetImportance {
  [__importance release_stub];
  __importance = nil;
  __importance_isset = NO;
}

- (NSString *) versionName {
  return [[__versionName retain_stub] autorelease_stub];
}

- (void) setVersionName: (NSString *) versionName {
  [versionName retain_stub];
  [__versionName release_stub];
  __versionName = versionName;
  __versionName_isset = YES;
}

- (BOOL) versionNameIsSet {
  return __versionName_isset;
}

- (void) unsetVersionName {
  [__versionName release_stub];
  __versionName = nil;
  __versionName_isset = NO;
}

- (int32_t) versionCode {
  return __versionCode;
}

- (void) setVersionCode: (int32_t) versionCode {
  __versionCode = versionCode;
  __versionCode_isset = YES;
}

- (BOOL) versionCodeIsSet {
  return __versionCode_isset;
}

- (void) unsetVersionCode {
  __versionCode_isset = NO;
}

- (NSMutableArray *) appSignatures {
  return [[__appSignatures retain_stub] autorelease_stub];
}

- (void) setAppSignatures: (NSMutableArray *) appSignatures {
  [appSignatures retain_stub];
  [__appSignatures release_stub];
  __appSignatures = appSignatures;
  __appSignatures_isset = YES;
}

- (BOOL) appSignaturesIsSet {
  return __appSignatures_isset;
}

- (void) unsetAppSignatures {
  [__appSignatures release_stub];
  __appSignatures = nil;
  __appSignatures_isset = NO;
}

- (NSString *) installationPkg {
  return [[__installationPkg retain_stub] autorelease_stub];
}

- (void) setInstallationPkg: (NSString *) installationPkg {
  [installationPkg retain_stub];
  [__installationPkg release_stub];
  __installationPkg = installationPkg;
  __installationPkg_isset = YES;
}

- (BOOL) installationPkgIsSet {
  return __installationPkg_isset;
}

- (void) unsetInstallationPkg {
  [__installationPkg release_stub];
  __installationPkg = nil;
  __installationPkg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setApplicationLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsSystemApp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImportance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersionName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersionCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setAppSignatures: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setInstallationPkg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ProcessInfo"];
  if (__pId_isset) {
    [outProtocol writeFieldBeginWithName: @"pId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __pId];
    [outProtocol writeFieldEnd];
  }
  if (__pName_isset) {
    if (__pName != nil) {
      [outProtocol writeFieldBeginWithName: @"pName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__applicationLabel_isset) {
    if (__applicationLabel != nil) {
      [outProtocol writeFieldBeginWithName: @"applicationLabel" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __applicationLabel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isSystemApp_isset) {
    [outProtocol writeFieldBeginWithName: @"isSystemApp" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isSystemApp];
    [outProtocol writeFieldEnd];
  }
  if (__importance_isset) {
    if (__importance != nil) {
      [outProtocol writeFieldBeginWithName: @"importance" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __importance];
      [outProtocol writeFieldEnd];
    }
  }
  if (__versionName_isset) {
    if (__versionName != nil) {
      [outProtocol writeFieldBeginWithName: @"versionName" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __versionName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__versionCode_isset) {
    [outProtocol writeFieldBeginWithName: @"versionCode" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __versionCode];
    [outProtocol writeFieldEnd];
  }
  if (__appSignatures_isset) {
    if (__appSignatures != nil) {
      [outProtocol writeFieldBeginWithName: @"appSignatures" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__appSignatures count]];
        int idx4;
        for (idx4 = 0; idx4 < [__appSignatures count]; idx4++)
        {
          [outProtocol writeString: [__appSignatures objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__installationPkg_isset) {
    if (__installationPkg != nil) {
      [outProtocol writeFieldBeginWithName: @"installationPkg" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __installationPkg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ProcessInfo("];
  [ms appendString: @"pId:"];
  [ms appendFormat: @"%i", __pId];
  [ms appendString: @",pName:"];
  [ms appendFormat: @"\"%@\"", __pName];
  [ms appendString: @",applicationLabel:"];
  [ms appendFormat: @"\"%@\"", __applicationLabel];
  [ms appendString: @",isSystemApp:"];
  [ms appendFormat: @"%i", __isSystemApp];
  [ms appendString: @",importance:"];
  [ms appendFormat: @"\"%@\"", __importance];
  [ms appendString: @",versionName:"];
  [ms appendFormat: @"\"%@\"", __versionName];
  [ms appendString: @",versionCode:"];
  [ms appendFormat: @"%i", __versionCode];
  [ms appendString: @",appSignatures:"];
  [ms appendFormat: @"%@", __appSignatures];
  [ms appendString: @",installationPkg:"];
  [ms appendFormat: @"\"%@\"", __installationPkg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NetworkStatistics

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithWifiReceived: (double) wifiReceived wifiSent: (double) wifiSent mobileReceived: (double) mobileReceived mobileSent: (double) mobileSent
{
  self = [super init];
  __wifiReceived = wifiReceived;
  __wifiReceived_isset = YES;
  __wifiSent = wifiSent;
  __wifiSent_isset = YES;
  __mobileReceived = mobileReceived;
  __mobileReceived_isset = YES;
  __mobileSent = mobileSent;
  __mobileSent_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"wifiReceived"])
  {
    __wifiReceived = [decoder decodeDoubleForKey: @"wifiReceived"];
    __wifiReceived_isset = YES;
  }
  if ([decoder containsValueForKey: @"wifiSent"])
  {
    __wifiSent = [decoder decodeDoubleForKey: @"wifiSent"];
    __wifiSent_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileReceived"])
  {
    __mobileReceived = [decoder decodeDoubleForKey: @"mobileReceived"];
    __mobileReceived_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileSent"])
  {
    __mobileSent = [decoder decodeDoubleForKey: @"mobileSent"];
    __mobileSent_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__wifiReceived_isset)
  {
    [encoder encodeDouble: __wifiReceived forKey: @"wifiReceived"];
  }
  if (__wifiSent_isset)
  {
    [encoder encodeDouble: __wifiSent forKey: @"wifiSent"];
  }
  if (__mobileReceived_isset)
  {
    [encoder encodeDouble: __mobileReceived forKey: @"mobileReceived"];
  }
  if (__mobileSent_isset)
  {
    [encoder encodeDouble: __mobileSent forKey: @"mobileSent"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __wifiReceived_isset ? 2654435761 : 0;
  if (__wifiReceived_isset)
  {
    hash = (hash * 31) ^ [@(__wifiReceived) hash];
  }
  hash = (hash * 31) ^ __wifiSent_isset ? 2654435761 : 0;
  if (__wifiSent_isset)
  {
    hash = (hash * 31) ^ [@(__wifiSent) hash];
  }
  hash = (hash * 31) ^ __mobileReceived_isset ? 2654435761 : 0;
  if (__mobileReceived_isset)
  {
    hash = (hash * 31) ^ [@(__mobileReceived) hash];
  }
  hash = (hash * 31) ^ __mobileSent_isset ? 2654435761 : 0;
  if (__mobileSent_isset)
  {
    hash = (hash * 31) ^ [@(__mobileSent) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NetworkStatistics class]]) {
    return NO;
  }
  NetworkStatistics *other = (NetworkStatistics *)anObject;
  if ((__wifiReceived_isset != other->__wifiReceived_isset) ||
      (__wifiReceived_isset && (__wifiReceived != other->__wifiReceived))) {
    return NO;
  }
  if ((__wifiSent_isset != other->__wifiSent_isset) ||
      (__wifiSent_isset && (__wifiSent != other->__wifiSent))) {
    return NO;
  }
  if ((__mobileReceived_isset != other->__mobileReceived_isset) ||
      (__mobileReceived_isset && (__mobileReceived != other->__mobileReceived))) {
    return NO;
  }
  if ((__mobileSent_isset != other->__mobileSent_isset) ||
      (__mobileSent_isset && (__mobileSent != other->__mobileSent))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) wifiReceived {
  return __wifiReceived;
}

- (void) setWifiReceived: (double) wifiReceived {
  __wifiReceived = wifiReceived;
  __wifiReceived_isset = YES;
}

- (BOOL) wifiReceivedIsSet {
  return __wifiReceived_isset;
}

- (void) unsetWifiReceived {
  __wifiReceived_isset = NO;
}

- (double) wifiSent {
  return __wifiSent;
}

- (void) setWifiSent: (double) wifiSent {
  __wifiSent = wifiSent;
  __wifiSent_isset = YES;
}

- (BOOL) wifiSentIsSet {
  return __wifiSent_isset;
}

- (void) unsetWifiSent {
  __wifiSent_isset = NO;
}

- (double) mobileReceived {
  return __mobileReceived;
}

- (void) setMobileReceived: (double) mobileReceived {
  __mobileReceived = mobileReceived;
  __mobileReceived_isset = YES;
}

- (BOOL) mobileReceivedIsSet {
  return __mobileReceived_isset;
}

- (void) unsetMobileReceived {
  __mobileReceived_isset = NO;
}

- (double) mobileSent {
  return __mobileSent;
}

- (void) setMobileSent: (double) mobileSent {
  __mobileSent = mobileSent;
  __mobileSent_isset = YES;
}

- (BOOL) mobileSentIsSet {
  return __mobileSent_isset;
}

- (void) unsetMobileSent {
  __mobileSent_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWifiReceived: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWifiSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMobileReceived: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setMobileSent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NetworkStatistics"];
  if (__wifiReceived_isset) {
    [outProtocol writeFieldBeginWithName: @"wifiReceived" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __wifiReceived];
    [outProtocol writeFieldEnd];
  }
  if (__wifiSent_isset) {
    [outProtocol writeFieldBeginWithName: @"wifiSent" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __wifiSent];
    [outProtocol writeFieldEnd];
  }
  if (__mobileReceived_isset) {
    [outProtocol writeFieldBeginWithName: @"mobileReceived" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __mobileReceived];
    [outProtocol writeFieldEnd];
  }
  if (__mobileSent_isset) {
    [outProtocol writeFieldBeginWithName: @"mobileSent" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __mobileSent];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NetworkStatistics("];
  [ms appendString: @"wifiReceived:"];
  [ms appendFormat: @"%f", __wifiReceived];
  [ms appendString: @",wifiSent:"];
  [ms appendFormat: @"%f", __wifiSent];
  [ms appendString: @",mobileReceived:"];
  [ms appendFormat: @"%f", __mobileReceived];
  [ms appendString: @",mobileSent:"];
  [ms appendFormat: @"%f", __mobileSent];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NetworkDetails

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNetworkType: (NSString *) networkType mobileNetworkType: (NSString *) mobileNetworkType mobileDataStatus: (NSString *) mobileDataStatus mobileDataActivity: (NSString *) mobileDataActivity roamingEnabled: (BOOL) roamingEnabled wifiStatus: (NSString *) wifiStatus wifiSignalStrength: (int32_t) wifiSignalStrength wifiLinkSpeed: (int32_t) wifiLinkSpeed networkStatistics: (NetworkStatistics *) networkStatistics
{
  self = [super init];
  __networkType = [networkType retain_stub];
  __networkType_isset = YES;
  __mobileNetworkType = [mobileNetworkType retain_stub];
  __mobileNetworkType_isset = YES;
  __mobileDataStatus = [mobileDataStatus retain_stub];
  __mobileDataStatus_isset = YES;
  __mobileDataActivity = [mobileDataActivity retain_stub];
  __mobileDataActivity_isset = YES;
  __roamingEnabled = roamingEnabled;
  __roamingEnabled_isset = YES;
  __wifiStatus = [wifiStatus retain_stub];
  __wifiStatus_isset = YES;
  __wifiSignalStrength = wifiSignalStrength;
  __wifiSignalStrength_isset = YES;
  __wifiLinkSpeed = wifiLinkSpeed;
  __wifiLinkSpeed_isset = YES;
  __networkStatistics = [networkStatistics retain_stub];
  __networkStatistics_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"networkType"])
  {
    __networkType = [[decoder decodeObjectForKey: @"networkType"] retain_stub];
    __networkType_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileNetworkType"])
  {
    __mobileNetworkType = [[decoder decodeObjectForKey: @"mobileNetworkType"] retain_stub];
    __mobileNetworkType_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileDataStatus"])
  {
    __mobileDataStatus = [[decoder decodeObjectForKey: @"mobileDataStatus"] retain_stub];
    __mobileDataStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobileDataActivity"])
  {
    __mobileDataActivity = [[decoder decodeObjectForKey: @"mobileDataActivity"] retain_stub];
    __mobileDataActivity_isset = YES;
  }
  if ([decoder containsValueForKey: @"roamingEnabled"])
  {
    __roamingEnabled = [decoder decodeBoolForKey: @"roamingEnabled"];
    __roamingEnabled_isset = YES;
  }
  if ([decoder containsValueForKey: @"wifiStatus"])
  {
    __wifiStatus = [[decoder decodeObjectForKey: @"wifiStatus"] retain_stub];
    __wifiStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"wifiSignalStrength"])
  {
    __wifiSignalStrength = [decoder decodeInt32ForKey: @"wifiSignalStrength"];
    __wifiSignalStrength_isset = YES;
  }
  if ([decoder containsValueForKey: @"wifiLinkSpeed"])
  {
    __wifiLinkSpeed = [decoder decodeInt32ForKey: @"wifiLinkSpeed"];
    __wifiLinkSpeed_isset = YES;
  }
  if ([decoder containsValueForKey: @"networkStatistics"])
  {
    __networkStatistics = [[decoder decodeObjectForKey: @"networkStatistics"] retain_stub];
    __networkStatistics_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__networkType_isset)
  {
    [encoder encodeObject: __networkType forKey: @"networkType"];
  }
  if (__mobileNetworkType_isset)
  {
    [encoder encodeObject: __mobileNetworkType forKey: @"mobileNetworkType"];
  }
  if (__mobileDataStatus_isset)
  {
    [encoder encodeObject: __mobileDataStatus forKey: @"mobileDataStatus"];
  }
  if (__mobileDataActivity_isset)
  {
    [encoder encodeObject: __mobileDataActivity forKey: @"mobileDataActivity"];
  }
  if (__roamingEnabled_isset)
  {
    [encoder encodeBool: __roamingEnabled forKey: @"roamingEnabled"];
  }
  if (__wifiStatus_isset)
  {
    [encoder encodeObject: __wifiStatus forKey: @"wifiStatus"];
  }
  if (__wifiSignalStrength_isset)
  {
    [encoder encodeInt32: __wifiSignalStrength forKey: @"wifiSignalStrength"];
  }
  if (__wifiLinkSpeed_isset)
  {
    [encoder encodeInt32: __wifiLinkSpeed forKey: @"wifiLinkSpeed"];
  }
  if (__networkStatistics_isset)
  {
    [encoder encodeObject: __networkStatistics forKey: @"networkStatistics"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __networkType_isset ? 2654435761 : 0;
  if (__networkType_isset)
  {
    hash = (hash * 31) ^ [__networkType hash];
  }
  hash = (hash * 31) ^ __mobileNetworkType_isset ? 2654435761 : 0;
  if (__mobileNetworkType_isset)
  {
    hash = (hash * 31) ^ [__mobileNetworkType hash];
  }
  hash = (hash * 31) ^ __mobileDataStatus_isset ? 2654435761 : 0;
  if (__mobileDataStatus_isset)
  {
    hash = (hash * 31) ^ [__mobileDataStatus hash];
  }
  hash = (hash * 31) ^ __mobileDataActivity_isset ? 2654435761 : 0;
  if (__mobileDataActivity_isset)
  {
    hash = (hash * 31) ^ [__mobileDataActivity hash];
  }
  hash = (hash * 31) ^ __roamingEnabled_isset ? 2654435761 : 0;
  if (__roamingEnabled_isset)
  {
    hash = (hash * 31) ^ [@(__roamingEnabled) hash];
  }
  hash = (hash * 31) ^ __wifiStatus_isset ? 2654435761 : 0;
  if (__wifiStatus_isset)
  {
    hash = (hash * 31) ^ [__wifiStatus hash];
  }
  hash = (hash * 31) ^ __wifiSignalStrength_isset ? 2654435761 : 0;
  if (__wifiSignalStrength_isset)
  {
    hash = (hash * 31) ^ [@(__wifiSignalStrength) hash];
  }
  hash = (hash * 31) ^ __wifiLinkSpeed_isset ? 2654435761 : 0;
  if (__wifiLinkSpeed_isset)
  {
    hash = (hash * 31) ^ [@(__wifiLinkSpeed) hash];
  }
  hash = (hash * 31) ^ __networkStatistics_isset ? 2654435761 : 0;
  if (__networkStatistics_isset)
  {
    hash = (hash * 31) ^ [__networkStatistics hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NetworkDetails class]]) {
    return NO;
  }
  NetworkDetails *other = (NetworkDetails *)anObject;
  if ((__networkType_isset != other->__networkType_isset) ||
      (__networkType_isset && ((__networkType || other->__networkType) && ![__networkType isEqual:other->__networkType]))) {
    return NO;
  }
  if ((__mobileNetworkType_isset != other->__mobileNetworkType_isset) ||
      (__mobileNetworkType_isset && ((__mobileNetworkType || other->__mobileNetworkType) && ![__mobileNetworkType isEqual:other->__mobileNetworkType]))) {
    return NO;
  }
  if ((__mobileDataStatus_isset != other->__mobileDataStatus_isset) ||
      (__mobileDataStatus_isset && ((__mobileDataStatus || other->__mobileDataStatus) && ![__mobileDataStatus isEqual:other->__mobileDataStatus]))) {
    return NO;
  }
  if ((__mobileDataActivity_isset != other->__mobileDataActivity_isset) ||
      (__mobileDataActivity_isset && ((__mobileDataActivity || other->__mobileDataActivity) && ![__mobileDataActivity isEqual:other->__mobileDataActivity]))) {
    return NO;
  }
  if ((__roamingEnabled_isset != other->__roamingEnabled_isset) ||
      (__roamingEnabled_isset && (__roamingEnabled != other->__roamingEnabled))) {
    return NO;
  }
  if ((__wifiStatus_isset != other->__wifiStatus_isset) ||
      (__wifiStatus_isset && ((__wifiStatus || other->__wifiStatus) && ![__wifiStatus isEqual:other->__wifiStatus]))) {
    return NO;
  }
  if ((__wifiSignalStrength_isset != other->__wifiSignalStrength_isset) ||
      (__wifiSignalStrength_isset && (__wifiSignalStrength != other->__wifiSignalStrength))) {
    return NO;
  }
  if ((__wifiLinkSpeed_isset != other->__wifiLinkSpeed_isset) ||
      (__wifiLinkSpeed_isset && (__wifiLinkSpeed != other->__wifiLinkSpeed))) {
    return NO;
  }
  if ((__networkStatistics_isset != other->__networkStatistics_isset) ||
      (__networkStatistics_isset && ((__networkStatistics || other->__networkStatistics) && ![__networkStatistics isEqual:other->__networkStatistics]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__networkType release_stub];
  [__mobileNetworkType release_stub];
  [__mobileDataStatus release_stub];
  [__mobileDataActivity release_stub];
  [__wifiStatus release_stub];
  [__networkStatistics release_stub];
  [super dealloc_stub];
}

- (NSString *) networkType {
  return [[__networkType retain_stub] autorelease_stub];
}

- (void) setNetworkType: (NSString *) networkType {
  [networkType retain_stub];
  [__networkType release_stub];
  __networkType = networkType;
  __networkType_isset = YES;
}

- (BOOL) networkTypeIsSet {
  return __networkType_isset;
}

- (void) unsetNetworkType {
  [__networkType release_stub];
  __networkType = nil;
  __networkType_isset = NO;
}

- (NSString *) mobileNetworkType {
  return [[__mobileNetworkType retain_stub] autorelease_stub];
}

- (void) setMobileNetworkType: (NSString *) mobileNetworkType {
  [mobileNetworkType retain_stub];
  [__mobileNetworkType release_stub];
  __mobileNetworkType = mobileNetworkType;
  __mobileNetworkType_isset = YES;
}

- (BOOL) mobileNetworkTypeIsSet {
  return __mobileNetworkType_isset;
}

- (void) unsetMobileNetworkType {
  [__mobileNetworkType release_stub];
  __mobileNetworkType = nil;
  __mobileNetworkType_isset = NO;
}

- (NSString *) mobileDataStatus {
  return [[__mobileDataStatus retain_stub] autorelease_stub];
}

- (void) setMobileDataStatus: (NSString *) mobileDataStatus {
  [mobileDataStatus retain_stub];
  [__mobileDataStatus release_stub];
  __mobileDataStatus = mobileDataStatus;
  __mobileDataStatus_isset = YES;
}

- (BOOL) mobileDataStatusIsSet {
  return __mobileDataStatus_isset;
}

- (void) unsetMobileDataStatus {
  [__mobileDataStatus release_stub];
  __mobileDataStatus = nil;
  __mobileDataStatus_isset = NO;
}

- (NSString *) mobileDataActivity {
  return [[__mobileDataActivity retain_stub] autorelease_stub];
}

- (void) setMobileDataActivity: (NSString *) mobileDataActivity {
  [mobileDataActivity retain_stub];
  [__mobileDataActivity release_stub];
  __mobileDataActivity = mobileDataActivity;
  __mobileDataActivity_isset = YES;
}

- (BOOL) mobileDataActivityIsSet {
  return __mobileDataActivity_isset;
}

- (void) unsetMobileDataActivity {
  [__mobileDataActivity release_stub];
  __mobileDataActivity = nil;
  __mobileDataActivity_isset = NO;
}

- (BOOL) roamingEnabled {
  return __roamingEnabled;
}

- (void) setRoamingEnabled: (BOOL) roamingEnabled {
  __roamingEnabled = roamingEnabled;
  __roamingEnabled_isset = YES;
}

- (BOOL) roamingEnabledIsSet {
  return __roamingEnabled_isset;
}

- (void) unsetRoamingEnabled {
  __roamingEnabled_isset = NO;
}

- (NSString *) wifiStatus {
  return [[__wifiStatus retain_stub] autorelease_stub];
}

- (void) setWifiStatus: (NSString *) wifiStatus {
  [wifiStatus retain_stub];
  [__wifiStatus release_stub];
  __wifiStatus = wifiStatus;
  __wifiStatus_isset = YES;
}

- (BOOL) wifiStatusIsSet {
  return __wifiStatus_isset;
}

- (void) unsetWifiStatus {
  [__wifiStatus release_stub];
  __wifiStatus = nil;
  __wifiStatus_isset = NO;
}

- (int32_t) wifiSignalStrength {
  return __wifiSignalStrength;
}

- (void) setWifiSignalStrength: (int32_t) wifiSignalStrength {
  __wifiSignalStrength = wifiSignalStrength;
  __wifiSignalStrength_isset = YES;
}

- (BOOL) wifiSignalStrengthIsSet {
  return __wifiSignalStrength_isset;
}

- (void) unsetWifiSignalStrength {
  __wifiSignalStrength_isset = NO;
}

- (int32_t) wifiLinkSpeed {
  return __wifiLinkSpeed;
}

- (void) setWifiLinkSpeed: (int32_t) wifiLinkSpeed {
  __wifiLinkSpeed = wifiLinkSpeed;
  __wifiLinkSpeed_isset = YES;
}

- (BOOL) wifiLinkSpeedIsSet {
  return __wifiLinkSpeed_isset;
}

- (void) unsetWifiLinkSpeed {
  __wifiLinkSpeed_isset = NO;
}

- (NetworkStatistics *) networkStatistics {
  return [[__networkStatistics retain_stub] autorelease_stub];
}

- (void) setNetworkStatistics: (NetworkStatistics *) networkStatistics {
  [networkStatistics retain_stub];
  [__networkStatistics release_stub];
  __networkStatistics = networkStatistics;
  __networkStatistics_isset = YES;
}

- (BOOL) networkStatisticsIsSet {
  return __networkStatistics_isset;
}

- (void) unsetNetworkStatistics {
  [__networkStatistics release_stub];
  __networkStatistics = nil;
  __networkStatistics_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNetworkType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileNetworkType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileDataStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobileDataActivity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setRoamingEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWifiStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWifiSignalStrength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setWifiLinkSpeed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRUCT) {
          NetworkStatistics *fieldValue = [[NetworkStatistics alloc] init];
          [fieldValue read: inProtocol];
          [self setNetworkStatistics: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NetworkDetails"];
  if (__networkType_isset) {
    if (__networkType != nil) {
      [outProtocol writeFieldBeginWithName: @"networkType" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __networkType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileNetworkType_isset) {
    if (__mobileNetworkType != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileNetworkType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobileNetworkType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileDataStatus_isset) {
    if (__mobileDataStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileDataStatus" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mobileDataStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobileDataActivity_isset) {
    if (__mobileDataActivity != nil) {
      [outProtocol writeFieldBeginWithName: @"mobileDataActivity" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __mobileDataActivity];
      [outProtocol writeFieldEnd];
    }
  }
  if (__roamingEnabled_isset) {
    [outProtocol writeFieldBeginWithName: @"roamingEnabled" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __roamingEnabled];
    [outProtocol writeFieldEnd];
  }
  if (__wifiStatus_isset) {
    if (__wifiStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"wifiStatus" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __wifiStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__wifiSignalStrength_isset) {
    [outProtocol writeFieldBeginWithName: @"wifiSignalStrength" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __wifiSignalStrength];
    [outProtocol writeFieldEnd];
  }
  if (__wifiLinkSpeed_isset) {
    [outProtocol writeFieldBeginWithName: @"wifiLinkSpeed" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __wifiLinkSpeed];
    [outProtocol writeFieldEnd];
  }
  if (__networkStatistics_isset) {
    if (__networkStatistics != nil) {
      [outProtocol writeFieldBeginWithName: @"networkStatistics" type: TType_STRUCT fieldID: 9];
      [__networkStatistics write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NetworkDetails("];
  [ms appendString: @"networkType:"];
  [ms appendFormat: @"\"%@\"", __networkType];
  [ms appendString: @",mobileNetworkType:"];
  [ms appendFormat: @"\"%@\"", __mobileNetworkType];
  [ms appendString: @",mobileDataStatus:"];
  [ms appendFormat: @"\"%@\"", __mobileDataStatus];
  [ms appendString: @",mobileDataActivity:"];
  [ms appendFormat: @"\"%@\"", __mobileDataActivity];
  [ms appendString: @",roamingEnabled:"];
  [ms appendFormat: @"%i", __roamingEnabled];
  [ms appendString: @",wifiStatus:"];
  [ms appendFormat: @"\"%@\"", __wifiStatus];
  [ms appendString: @",wifiSignalStrength:"];
  [ms appendFormat: @"%i", __wifiSignalStrength];
  [ms appendString: @",wifiLinkSpeed:"];
  [ms appendFormat: @"%i", __wifiLinkSpeed];
  [ms appendString: @",networkStatistics:"];
  [ms appendFormat: @"%@", __networkStatistics];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation BatteryDetails

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBatteryCharger: (NSString *) batteryCharger batteryHealth: (NSString *) batteryHealth batteryVoltage: (double) batteryVoltage batteryTemperature: (double) batteryTemperature batteryTechnology: (NSString *) batteryTechnology batteryCapacity: (double) batteryCapacity
{
  self = [super init];
  __batteryCharger = [batteryCharger retain_stub];
  __batteryCharger_isset = YES;
  __batteryHealth = [batteryHealth retain_stub];
  __batteryHealth_isset = YES;
  __batteryVoltage = batteryVoltage;
  __batteryVoltage_isset = YES;
  __batteryTemperature = batteryTemperature;
  __batteryTemperature_isset = YES;
  __batteryTechnology = [batteryTechnology retain_stub];
  __batteryTechnology_isset = YES;
  __batteryCapacity = batteryCapacity;
  __batteryCapacity_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"batteryCharger"])
  {
    __batteryCharger = [[decoder decodeObjectForKey: @"batteryCharger"] retain_stub];
    __batteryCharger_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryHealth"])
  {
    __batteryHealth = [[decoder decodeObjectForKey: @"batteryHealth"] retain_stub];
    __batteryHealth_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryVoltage"])
  {
    __batteryVoltage = [decoder decodeDoubleForKey: @"batteryVoltage"];
    __batteryVoltage_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryTemperature"])
  {
    __batteryTemperature = [decoder decodeDoubleForKey: @"batteryTemperature"];
    __batteryTemperature_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryTechnology"])
  {
    __batteryTechnology = [[decoder decodeObjectForKey: @"batteryTechnology"] retain_stub];
    __batteryTechnology_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryCapacity"])
  {
    __batteryCapacity = [decoder decodeDoubleForKey: @"batteryCapacity"];
    __batteryCapacity_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__batteryCharger_isset)
  {
    [encoder encodeObject: __batteryCharger forKey: @"batteryCharger"];
  }
  if (__batteryHealth_isset)
  {
    [encoder encodeObject: __batteryHealth forKey: @"batteryHealth"];
  }
  if (__batteryVoltage_isset)
  {
    [encoder encodeDouble: __batteryVoltage forKey: @"batteryVoltage"];
  }
  if (__batteryTemperature_isset)
  {
    [encoder encodeDouble: __batteryTemperature forKey: @"batteryTemperature"];
  }
  if (__batteryTechnology_isset)
  {
    [encoder encodeObject: __batteryTechnology forKey: @"batteryTechnology"];
  }
  if (__batteryCapacity_isset)
  {
    [encoder encodeDouble: __batteryCapacity forKey: @"batteryCapacity"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __batteryCharger_isset ? 2654435761 : 0;
  if (__batteryCharger_isset)
  {
    hash = (hash * 31) ^ [__batteryCharger hash];
  }
  hash = (hash * 31) ^ __batteryHealth_isset ? 2654435761 : 0;
  if (__batteryHealth_isset)
  {
    hash = (hash * 31) ^ [__batteryHealth hash];
  }
  hash = (hash * 31) ^ __batteryVoltage_isset ? 2654435761 : 0;
  if (__batteryVoltage_isset)
  {
    hash = (hash * 31) ^ [@(__batteryVoltage) hash];
  }
  hash = (hash * 31) ^ __batteryTemperature_isset ? 2654435761 : 0;
  if (__batteryTemperature_isset)
  {
    hash = (hash * 31) ^ [@(__batteryTemperature) hash];
  }
  hash = (hash * 31) ^ __batteryTechnology_isset ? 2654435761 : 0;
  if (__batteryTechnology_isset)
  {
    hash = (hash * 31) ^ [__batteryTechnology hash];
  }
  hash = (hash * 31) ^ __batteryCapacity_isset ? 2654435761 : 0;
  if (__batteryCapacity_isset)
  {
    hash = (hash * 31) ^ [@(__batteryCapacity) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BatteryDetails class]]) {
    return NO;
  }
  BatteryDetails *other = (BatteryDetails *)anObject;
  if ((__batteryCharger_isset != other->__batteryCharger_isset) ||
      (__batteryCharger_isset && ((__batteryCharger || other->__batteryCharger) && ![__batteryCharger isEqual:other->__batteryCharger]))) {
    return NO;
  }
  if ((__batteryHealth_isset != other->__batteryHealth_isset) ||
      (__batteryHealth_isset && ((__batteryHealth || other->__batteryHealth) && ![__batteryHealth isEqual:other->__batteryHealth]))) {
    return NO;
  }
  if ((__batteryVoltage_isset != other->__batteryVoltage_isset) ||
      (__batteryVoltage_isset && (__batteryVoltage != other->__batteryVoltage))) {
    return NO;
  }
  if ((__batteryTemperature_isset != other->__batteryTemperature_isset) ||
      (__batteryTemperature_isset && (__batteryTemperature != other->__batteryTemperature))) {
    return NO;
  }
  if ((__batteryTechnology_isset != other->__batteryTechnology_isset) ||
      (__batteryTechnology_isset && ((__batteryTechnology || other->__batteryTechnology) && ![__batteryTechnology isEqual:other->__batteryTechnology]))) {
    return NO;
  }
  if ((__batteryCapacity_isset != other->__batteryCapacity_isset) ||
      (__batteryCapacity_isset && (__batteryCapacity != other->__batteryCapacity))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__batteryCharger release_stub];
  [__batteryHealth release_stub];
  [__batteryTechnology release_stub];
  [super dealloc_stub];
}

- (NSString *) batteryCharger {
  return [[__batteryCharger retain_stub] autorelease_stub];
}

- (void) setBatteryCharger: (NSString *) batteryCharger {
  [batteryCharger retain_stub];
  [__batteryCharger release_stub];
  __batteryCharger = batteryCharger;
  __batteryCharger_isset = YES;
}

- (BOOL) batteryChargerIsSet {
  return __batteryCharger_isset;
}

- (void) unsetBatteryCharger {
  [__batteryCharger release_stub];
  __batteryCharger = nil;
  __batteryCharger_isset = NO;
}

- (NSString *) batteryHealth {
  return [[__batteryHealth retain_stub] autorelease_stub];
}

- (void) setBatteryHealth: (NSString *) batteryHealth {
  [batteryHealth retain_stub];
  [__batteryHealth release_stub];
  __batteryHealth = batteryHealth;
  __batteryHealth_isset = YES;
}

- (BOOL) batteryHealthIsSet {
  return __batteryHealth_isset;
}

- (void) unsetBatteryHealth {
  [__batteryHealth release_stub];
  __batteryHealth = nil;
  __batteryHealth_isset = NO;
}

- (double) batteryVoltage {
  return __batteryVoltage;
}

- (void) setBatteryVoltage: (double) batteryVoltage {
  __batteryVoltage = batteryVoltage;
  __batteryVoltage_isset = YES;
}

- (BOOL) batteryVoltageIsSet {
  return __batteryVoltage_isset;
}

- (void) unsetBatteryVoltage {
  __batteryVoltage_isset = NO;
}

- (double) batteryTemperature {
  return __batteryTemperature;
}

- (void) setBatteryTemperature: (double) batteryTemperature {
  __batteryTemperature = batteryTemperature;
  __batteryTemperature_isset = YES;
}

- (BOOL) batteryTemperatureIsSet {
  return __batteryTemperature_isset;
}

- (void) unsetBatteryTemperature {
  __batteryTemperature_isset = NO;
}

- (NSString *) batteryTechnology {
  return [[__batteryTechnology retain_stub] autorelease_stub];
}

- (void) setBatteryTechnology: (NSString *) batteryTechnology {
  [batteryTechnology retain_stub];
  [__batteryTechnology release_stub];
  __batteryTechnology = batteryTechnology;
  __batteryTechnology_isset = YES;
}

- (BOOL) batteryTechnologyIsSet {
  return __batteryTechnology_isset;
}

- (void) unsetBatteryTechnology {
  [__batteryTechnology release_stub];
  __batteryTechnology = nil;
  __batteryTechnology_isset = NO;
}

- (double) batteryCapacity {
  return __batteryCapacity;
}

- (void) setBatteryCapacity: (double) batteryCapacity {
  __batteryCapacity = batteryCapacity;
  __batteryCapacity_isset = YES;
}

- (BOOL) batteryCapacityIsSet {
  return __batteryCapacity_isset;
}

- (void) unsetBatteryCapacity {
  __batteryCapacity_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBatteryCharger: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBatteryHealth: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBatteryVoltage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBatteryTemperature: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBatteryTechnology: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBatteryCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BatteryDetails"];
  if (__batteryCharger_isset) {
    if (__batteryCharger != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryCharger" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __batteryCharger];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryHealth_isset) {
    if (__batteryHealth != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryHealth" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __batteryHealth];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryVoltage_isset) {
    [outProtocol writeFieldBeginWithName: @"batteryVoltage" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __batteryVoltage];
    [outProtocol writeFieldEnd];
  }
  if (__batteryTemperature_isset) {
    [outProtocol writeFieldBeginWithName: @"batteryTemperature" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __batteryTemperature];
    [outProtocol writeFieldEnd];
  }
  if (__batteryTechnology_isset) {
    if (__batteryTechnology != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryTechnology" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __batteryTechnology];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryCapacity_isset) {
    [outProtocol writeFieldBeginWithName: @"batteryCapacity" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __batteryCapacity];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BatteryDetails("];
  [ms appendString: @"batteryCharger:"];
  [ms appendFormat: @"\"%@\"", __batteryCharger];
  [ms appendString: @",batteryHealth:"];
  [ms appendFormat: @"\"%@\"", __batteryHealth];
  [ms appendString: @",batteryVoltage:"];
  [ms appendFormat: @"%f", __batteryVoltage];
  [ms appendString: @",batteryTemperature:"];
  [ms appendFormat: @"%f", __batteryTemperature];
  [ms appendString: @",batteryTechnology:"];
  [ms appendFormat: @"\"%@\"", __batteryTechnology];
  [ms appendString: @",batteryCapacity:"];
  [ms appendFormat: @"%f", __batteryCapacity];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CpuStatus

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCpuUsage: (double) cpuUsage uptime: (double) uptime sleeptime: (double) sleeptime
{
  self = [super init];
  __cpuUsage = cpuUsage;
  __cpuUsage_isset = YES;
  __uptime = uptime;
  __uptime_isset = YES;
  __sleeptime = sleeptime;
  __sleeptime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"cpuUsage"])
  {
    __cpuUsage = [decoder decodeDoubleForKey: @"cpuUsage"];
    __cpuUsage_isset = YES;
  }
  if ([decoder containsValueForKey: @"uptime"])
  {
    __uptime = [decoder decodeDoubleForKey: @"uptime"];
    __uptime_isset = YES;
  }
  if ([decoder containsValueForKey: @"sleeptime"])
  {
    __sleeptime = [decoder decodeDoubleForKey: @"sleeptime"];
    __sleeptime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__cpuUsage_isset)
  {
    [encoder encodeDouble: __cpuUsage forKey: @"cpuUsage"];
  }
  if (__uptime_isset)
  {
    [encoder encodeDouble: __uptime forKey: @"uptime"];
  }
  if (__sleeptime_isset)
  {
    [encoder encodeDouble: __sleeptime forKey: @"sleeptime"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __cpuUsage_isset ? 2654435761 : 0;
  if (__cpuUsage_isset)
  {
    hash = (hash * 31) ^ [@(__cpuUsage) hash];
  }
  hash = (hash * 31) ^ __uptime_isset ? 2654435761 : 0;
  if (__uptime_isset)
  {
    hash = (hash * 31) ^ [@(__uptime) hash];
  }
  hash = (hash * 31) ^ __sleeptime_isset ? 2654435761 : 0;
  if (__sleeptime_isset)
  {
    hash = (hash * 31) ^ [@(__sleeptime) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CpuStatus class]]) {
    return NO;
  }
  CpuStatus *other = (CpuStatus *)anObject;
  if ((__cpuUsage_isset != other->__cpuUsage_isset) ||
      (__cpuUsage_isset && (__cpuUsage != other->__cpuUsage))) {
    return NO;
  }
  if ((__uptime_isset != other->__uptime_isset) ||
      (__uptime_isset && (__uptime != other->__uptime))) {
    return NO;
  }
  if ((__sleeptime_isset != other->__sleeptime_isset) ||
      (__sleeptime_isset && (__sleeptime != other->__sleeptime))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (double) cpuUsage {
  return __cpuUsage;
}

- (void) setCpuUsage: (double) cpuUsage {
  __cpuUsage = cpuUsage;
  __cpuUsage_isset = YES;
}

- (BOOL) cpuUsageIsSet {
  return __cpuUsage_isset;
}

- (void) unsetCpuUsage {
  __cpuUsage_isset = NO;
}

- (double) uptime {
  return __uptime;
}

- (void) setUptime: (double) uptime {
  __uptime = uptime;
  __uptime_isset = YES;
}

- (BOOL) uptimeIsSet {
  return __uptime_isset;
}

- (void) unsetUptime {
  __uptime_isset = NO;
}

- (double) sleeptime {
  return __sleeptime;
}

- (void) setSleeptime: (double) sleeptime {
  __sleeptime = sleeptime;
  __sleeptime_isset = YES;
}

- (BOOL) sleeptimeIsSet {
  return __sleeptime_isset;
}

- (void) unsetSleeptime {
  __sleeptime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setCpuUsage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setUptime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSleeptime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CpuStatus"];
  if (__cpuUsage_isset) {
    [outProtocol writeFieldBeginWithName: @"cpuUsage" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __cpuUsage];
    [outProtocol writeFieldEnd];
  }
  if (__uptime_isset) {
    [outProtocol writeFieldBeginWithName: @"uptime" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __uptime];
    [outProtocol writeFieldEnd];
  }
  if (__sleeptime_isset) {
    [outProtocol writeFieldBeginWithName: @"sleeptime" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __sleeptime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CpuStatus("];
  [ms appendString: @"cpuUsage:"];
  [ms appendFormat: @"%f", __cpuUsage];
  [ms appendString: @",uptime:"];
  [ms appendFormat: @"%f", __uptime];
  [ms appendString: @",sleeptime:"];
  [ms appendFormat: @"%f", __sleeptime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CallInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithIncomingCallTime: (double) incomingCallTime outgoingCallTime: (double) outgoingCallTime nonCallTime: (double) nonCallTime callStatus: (NSString *) callStatus
{
  self = [super init];
  __incomingCallTime = incomingCallTime;
  __incomingCallTime_isset = YES;
  __outgoingCallTime = outgoingCallTime;
  __outgoingCallTime_isset = YES;
  __nonCallTime = nonCallTime;
  __nonCallTime_isset = YES;
  __callStatus = [callStatus retain_stub];
  __callStatus_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"incomingCallTime"])
  {
    __incomingCallTime = [decoder decodeDoubleForKey: @"incomingCallTime"];
    __incomingCallTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"outgoingCallTime"])
  {
    __outgoingCallTime = [decoder decodeDoubleForKey: @"outgoingCallTime"];
    __outgoingCallTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"nonCallTime"])
  {
    __nonCallTime = [decoder decodeDoubleForKey: @"nonCallTime"];
    __nonCallTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"callStatus"])
  {
    __callStatus = [[decoder decodeObjectForKey: @"callStatus"] retain_stub];
    __callStatus_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__incomingCallTime_isset)
  {
    [encoder encodeDouble: __incomingCallTime forKey: @"incomingCallTime"];
  }
  if (__outgoingCallTime_isset)
  {
    [encoder encodeDouble: __outgoingCallTime forKey: @"outgoingCallTime"];
  }
  if (__nonCallTime_isset)
  {
    [encoder encodeDouble: __nonCallTime forKey: @"nonCallTime"];
  }
  if (__callStatus_isset)
  {
    [encoder encodeObject: __callStatus forKey: @"callStatus"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __incomingCallTime_isset ? 2654435761 : 0;
  if (__incomingCallTime_isset)
  {
    hash = (hash * 31) ^ [@(__incomingCallTime) hash];
  }
  hash = (hash * 31) ^ __outgoingCallTime_isset ? 2654435761 : 0;
  if (__outgoingCallTime_isset)
  {
    hash = (hash * 31) ^ [@(__outgoingCallTime) hash];
  }
  hash = (hash * 31) ^ __nonCallTime_isset ? 2654435761 : 0;
  if (__nonCallTime_isset)
  {
    hash = (hash * 31) ^ [@(__nonCallTime) hash];
  }
  hash = (hash * 31) ^ __callStatus_isset ? 2654435761 : 0;
  if (__callStatus_isset)
  {
    hash = (hash * 31) ^ [__callStatus hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CallInfo class]]) {
    return NO;
  }
  CallInfo *other = (CallInfo *)anObject;
  if ((__incomingCallTime_isset != other->__incomingCallTime_isset) ||
      (__incomingCallTime_isset && (__incomingCallTime != other->__incomingCallTime))) {
    return NO;
  }
  if ((__outgoingCallTime_isset != other->__outgoingCallTime_isset) ||
      (__outgoingCallTime_isset && (__outgoingCallTime != other->__outgoingCallTime))) {
    return NO;
  }
  if ((__nonCallTime_isset != other->__nonCallTime_isset) ||
      (__nonCallTime_isset && (__nonCallTime != other->__nonCallTime))) {
    return NO;
  }
  if ((__callStatus_isset != other->__callStatus_isset) ||
      (__callStatus_isset && ((__callStatus || other->__callStatus) && ![__callStatus isEqual:other->__callStatus]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__callStatus release_stub];
  [super dealloc_stub];
}

- (double) incomingCallTime {
  return __incomingCallTime;
}

- (void) setIncomingCallTime: (double) incomingCallTime {
  __incomingCallTime = incomingCallTime;
  __incomingCallTime_isset = YES;
}

- (BOOL) incomingCallTimeIsSet {
  return __incomingCallTime_isset;
}

- (void) unsetIncomingCallTime {
  __incomingCallTime_isset = NO;
}

- (double) outgoingCallTime {
  return __outgoingCallTime;
}

- (void) setOutgoingCallTime: (double) outgoingCallTime {
  __outgoingCallTime = outgoingCallTime;
  __outgoingCallTime_isset = YES;
}

- (BOOL) outgoingCallTimeIsSet {
  return __outgoingCallTime_isset;
}

- (void) unsetOutgoingCallTime {
  __outgoingCallTime_isset = NO;
}

- (double) nonCallTime {
  return __nonCallTime;
}

- (void) setNonCallTime: (double) nonCallTime {
  __nonCallTime = nonCallTime;
  __nonCallTime_isset = YES;
}

- (BOOL) nonCallTimeIsSet {
  return __nonCallTime_isset;
}

- (void) unsetNonCallTime {
  __nonCallTime_isset = NO;
}

- (NSString *) callStatus {
  return [[__callStatus retain_stub] autorelease_stub];
}

- (void) setCallStatus: (NSString *) callStatus {
  [callStatus retain_stub];
  [__callStatus release_stub];
  __callStatus = callStatus;
  __callStatus_isset = YES;
}

- (BOOL) callStatusIsSet {
  return __callStatus_isset;
}

- (void) unsetCallStatus {
  [__callStatus release_stub];
  __callStatus = nil;
  __callStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setIncomingCallTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setOutgoingCallTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setNonCallTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCallStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CallInfo"];
  if (__incomingCallTime_isset) {
    [outProtocol writeFieldBeginWithName: @"incomingCallTime" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __incomingCallTime];
    [outProtocol writeFieldEnd];
  }
  if (__outgoingCallTime_isset) {
    [outProtocol writeFieldBeginWithName: @"outgoingCallTime" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __outgoingCallTime];
    [outProtocol writeFieldEnd];
  }
  if (__nonCallTime_isset) {
    [outProtocol writeFieldBeginWithName: @"nonCallTime" type: TType_DOUBLE fieldID: 3];
    [outProtocol writeDouble: __nonCallTime];
    [outProtocol writeFieldEnd];
  }
  if (__callStatus_isset) {
    if (__callStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"callStatus" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __callStatus];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CallInfo("];
  [ms appendString: @"incomingCallTime:"];
  [ms appendFormat: @"%f", __incomingCallTime];
  [ms appendString: @",outgoingCallTime:"];
  [ms appendFormat: @"%f", __outgoingCallTime];
  [ms appendString: @",nonCallTime:"];
  [ms appendFormat: @"%f", __nonCallTime];
  [ms appendString: @",callStatus:"];
  [ms appendFormat: @"\"%@\"", __callStatus];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Feature

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKey: (NSString *) key value: (NSString *) value
{
  self = [super init];
  __key = [key retain_stub];
  __key_isset = YES;
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"key"])
  {
    __key = [[decoder decodeObjectForKey: @"key"] retain_stub];
    __key_isset = YES;
  }
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__key_isset)
  {
    [encoder encodeObject: __key forKey: @"key"];
  }
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __key_isset ? 2654435761 : 0;
  if (__key_isset)
  {
    hash = (hash * 31) ^ [__key hash];
  }
  hash = (hash * 31) ^ __value_isset ? 2654435761 : 0;
  if (__value_isset)
  {
    hash = (hash * 31) ^ [__value hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Feature class]]) {
    return NO;
  }
  Feature *other = (Feature *)anObject;
  if ((__key_isset != other->__key_isset) ||
      (__key_isset && ((__key || other->__key) && ![__key isEqual:other->__key]))) {
    return NO;
  }
  if ((__value_isset != other->__value_isset) ||
      (__value_isset && ((__value || other->__value) && ![__value isEqual:other->__value]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__key release_stub];
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) key {
  return [[__key retain_stub] autorelease_stub];
}

- (void) setKey: (NSString *) key {
  [key retain_stub];
  [__key release_stub];
  __key = key;
  __key_isset = YES;
}

- (BOOL) keyIsSet {
  return __key_isset;
}

- (void) unsetKey {
  [__key release_stub];
  __key = nil;
  __key_isset = NO;
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKey: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Feature"];
  if (__key_isset) {
    if (__key != nil) {
      [outProtocol writeFieldBeginWithName: @"key" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __key];
      [outProtocol writeFieldEnd];
    }
  }
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Feature("];
  [ms appendString: @"key:"];
  [ms appendFormat: @"\"%@\"", __key];
  [ms appendString: @",value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Settings

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBluetoothEnabled: (BOOL) bluetoothEnabled locationEnabled: (BOOL) locationEnabled
{
  self = [super init];
  __bluetoothEnabled = bluetoothEnabled;
  __bluetoothEnabled_isset = YES;
  __locationEnabled = locationEnabled;
  __locationEnabled_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"bluetoothEnabled"])
  {
    __bluetoothEnabled = [decoder decodeBoolForKey: @"bluetoothEnabled"];
    __bluetoothEnabled_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationEnabled"])
  {
    __locationEnabled = [decoder decodeBoolForKey: @"locationEnabled"];
    __locationEnabled_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__bluetoothEnabled_isset)
  {
    [encoder encodeBool: __bluetoothEnabled forKey: @"bluetoothEnabled"];
  }
  if (__locationEnabled_isset)
  {
    [encoder encodeBool: __locationEnabled forKey: @"locationEnabled"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __bluetoothEnabled_isset ? 2654435761 : 0;
  if (__bluetoothEnabled_isset)
  {
    hash = (hash * 31) ^ [@(__bluetoothEnabled) hash];
  }
  hash = (hash * 31) ^ __locationEnabled_isset ? 2654435761 : 0;
  if (__locationEnabled_isset)
  {
    hash = (hash * 31) ^ [@(__locationEnabled) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Settings class]]) {
    return NO;
  }
  Settings *other = (Settings *)anObject;
  if ((__bluetoothEnabled_isset != other->__bluetoothEnabled_isset) ||
      (__bluetoothEnabled_isset && (__bluetoothEnabled != other->__bluetoothEnabled))) {
    return NO;
  }
  if ((__locationEnabled_isset != other->__locationEnabled_isset) ||
      (__locationEnabled_isset && (__locationEnabled != other->__locationEnabled))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) bluetoothEnabled {
  return __bluetoothEnabled;
}

- (void) setBluetoothEnabled: (BOOL) bluetoothEnabled {
  __bluetoothEnabled = bluetoothEnabled;
  __bluetoothEnabled_isset = YES;
}

- (BOOL) bluetoothEnabledIsSet {
  return __bluetoothEnabled_isset;
}

- (void) unsetBluetoothEnabled {
  __bluetoothEnabled_isset = NO;
}

- (BOOL) locationEnabled {
  return __locationEnabled;
}

- (void) setLocationEnabled: (BOOL) locationEnabled {
  __locationEnabled = locationEnabled;
  __locationEnabled_isset = YES;
}

- (BOOL) locationEnabledIsSet {
  return __locationEnabled_isset;
}

- (void) unsetLocationEnabled {
  __locationEnabled_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setBluetoothEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setLocationEnabled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Settings"];
  if (__bluetoothEnabled_isset) {
    [outProtocol writeFieldBeginWithName: @"bluetoothEnabled" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __bluetoothEnabled];
    [outProtocol writeFieldEnd];
  }
  if (__locationEnabled_isset) {
    [outProtocol writeFieldBeginWithName: @"locationEnabled" type: TType_BOOL fieldID: 6];
    [outProtocol writeBool: __locationEnabled];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Settings("];
  [ms appendString: @"bluetoothEnabled:"];
  [ms appendFormat: @"%i", __bluetoothEnabled];
  [ms appendString: @",locationEnabled:"];
  [ms appendFormat: @"%i", __locationEnabled];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Sample

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUuId: (NSString *) uuId timestamp: (double) timestamp piList: (ProcessInfoList) piList batteryState: (NSString *) batteryState batteryLevel: (double) batteryLevel memoryWired: (int32_t) memoryWired memoryActive: (int32_t) memoryActive memoryInactive: (int32_t) memoryInactive memoryFree: (int32_t) memoryFree memoryUser: (int32_t) memoryUser triggeredBy: (NSString *) triggeredBy networkStatus: (NSString *) networkStatus distanceTraveled: (double) distanceTraveled screenBrightness: (int32_t) screenBrightness networkDetails: (NetworkDetails *) networkDetails batteryDetails: (BatteryDetails *) batteryDetails cpuStatus: (CpuStatus *) cpuStatus locationProviders: (NSMutableArray *) locationProviders callInfo: (CallInfo *) callInfo screenOn: (int32_t) screenOn timeZone: (NSString *) timeZone unknownSources: (int32_t) unknownSources developerMode: (int32_t) developerMode extra: (NSMutableArray *) extra settings: (Settings *) settings
{
  self = [super init];
  __uuId = [uuId retain_stub];
  __uuId_isset = YES;
  __timestamp = timestamp;
  __timestamp_isset = YES;
  __piList = [piList retain_stub];
  __piList_isset = YES;
  __batteryState = [batteryState retain_stub];
  __batteryState_isset = YES;
  __batteryLevel = batteryLevel;
  __batteryLevel_isset = YES;
  __memoryWired = memoryWired;
  __memoryWired_isset = YES;
  __memoryActive = memoryActive;
  __memoryActive_isset = YES;
  __memoryInactive = memoryInactive;
  __memoryInactive_isset = YES;
  __memoryFree = memoryFree;
  __memoryFree_isset = YES;
  __memoryUser = memoryUser;
  __memoryUser_isset = YES;
  __triggeredBy = [triggeredBy retain_stub];
  __triggeredBy_isset = YES;
  __networkStatus = [networkStatus retain_stub];
  __networkStatus_isset = YES;
  __distanceTraveled = distanceTraveled;
  __distanceTraveled_isset = YES;
  __screenBrightness = screenBrightness;
  __screenBrightness_isset = YES;
  __networkDetails = [networkDetails retain_stub];
  __networkDetails_isset = YES;
  __batteryDetails = [batteryDetails retain_stub];
  __batteryDetails_isset = YES;
  __cpuStatus = [cpuStatus retain_stub];
  __cpuStatus_isset = YES;
  __locationProviders = [locationProviders retain_stub];
  __locationProviders_isset = YES;
  __callInfo = [callInfo retain_stub];
  __callInfo_isset = YES;
  __screenOn = screenOn;
  __screenOn_isset = YES;
  __timeZone = [timeZone retain_stub];
  __timeZone_isset = YES;
  __unknownSources = unknownSources;
  __unknownSources_isset = YES;
  __developerMode = developerMode;
  __developerMode_isset = YES;
  __extra = [extra retain_stub];
  __extra_isset = YES;
  __settings = [settings retain_stub];
  __settings_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain_stub];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"timestamp"])
  {
    __timestamp = [decoder decodeDoubleForKey: @"timestamp"];
    __timestamp_isset = YES;
  }
  if ([decoder containsValueForKey: @"piList"])
  {
    __piList = [[decoder decodeObjectForKey: @"piList"] retain_stub];
    __piList_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryState"])
  {
    __batteryState = [[decoder decodeObjectForKey: @"batteryState"] retain_stub];
    __batteryState_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryLevel"])
  {
    __batteryLevel = [decoder decodeDoubleForKey: @"batteryLevel"];
    __batteryLevel_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryWired"])
  {
    __memoryWired = [decoder decodeInt32ForKey: @"memoryWired"];
    __memoryWired_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryActive"])
  {
    __memoryActive = [decoder decodeInt32ForKey: @"memoryActive"];
    __memoryActive_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryInactive"])
  {
    __memoryInactive = [decoder decodeInt32ForKey: @"memoryInactive"];
    __memoryInactive_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryFree"])
  {
    __memoryFree = [decoder decodeInt32ForKey: @"memoryFree"];
    __memoryFree_isset = YES;
  }
  if ([decoder containsValueForKey: @"memoryUser"])
  {
    __memoryUser = [decoder decodeInt32ForKey: @"memoryUser"];
    __memoryUser_isset = YES;
  }
  if ([decoder containsValueForKey: @"triggeredBy"])
  {
    __triggeredBy = [[decoder decodeObjectForKey: @"triggeredBy"] retain_stub];
    __triggeredBy_isset = YES;
  }
  if ([decoder containsValueForKey: @"networkStatus"])
  {
    __networkStatus = [[decoder decodeObjectForKey: @"networkStatus"] retain_stub];
    __networkStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"distanceTraveled"])
  {
    __distanceTraveled = [decoder decodeDoubleForKey: @"distanceTraveled"];
    __distanceTraveled_isset = YES;
  }
  if ([decoder containsValueForKey: @"screenBrightness"])
  {
    __screenBrightness = [decoder decodeInt32ForKey: @"screenBrightness"];
    __screenBrightness_isset = YES;
  }
  if ([decoder containsValueForKey: @"networkDetails"])
  {
    __networkDetails = [[decoder decodeObjectForKey: @"networkDetails"] retain_stub];
    __networkDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"batteryDetails"])
  {
    __batteryDetails = [[decoder decodeObjectForKey: @"batteryDetails"] retain_stub];
    __batteryDetails_isset = YES;
  }
  if ([decoder containsValueForKey: @"cpuStatus"])
  {
    __cpuStatus = [[decoder decodeObjectForKey: @"cpuStatus"] retain_stub];
    __cpuStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"locationProviders"])
  {
    __locationProviders = [[decoder decodeObjectForKey: @"locationProviders"] retain_stub];
    __locationProviders_isset = YES;
  }
  if ([decoder containsValueForKey: @"callInfo"])
  {
    __callInfo = [[decoder decodeObjectForKey: @"callInfo"] retain_stub];
    __callInfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"screenOn"])
  {
    __screenOn = [decoder decodeInt32ForKey: @"screenOn"];
    __screenOn_isset = YES;
  }
  if ([decoder containsValueForKey: @"timeZone"])
  {
    __timeZone = [[decoder decodeObjectForKey: @"timeZone"] retain_stub];
    __timeZone_isset = YES;
  }
  if ([decoder containsValueForKey: @"unknownSources"])
  {
    __unknownSources = [decoder decodeInt32ForKey: @"unknownSources"];
    __unknownSources_isset = YES;
  }
  if ([decoder containsValueForKey: @"developerMode"])
  {
    __developerMode = [decoder decodeInt32ForKey: @"developerMode"];
    __developerMode_isset = YES;
  }
  if ([decoder containsValueForKey: @"extra"])
  {
    __extra = [[decoder decodeObjectForKey: @"extra"] retain_stub];
    __extra_isset = YES;
  }
  if ([decoder containsValueForKey: @"settings"])
  {
    __settings = [[decoder decodeObjectForKey: @"settings"] retain_stub];
    __settings_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__timestamp_isset)
  {
    [encoder encodeDouble: __timestamp forKey: @"timestamp"];
  }
  if (__piList_isset)
  {
    [encoder encodeObject: __piList forKey: @"piList"];
  }
  if (__batteryState_isset)
  {
    [encoder encodeObject: __batteryState forKey: @"batteryState"];
  }
  if (__batteryLevel_isset)
  {
    [encoder encodeDouble: __batteryLevel forKey: @"batteryLevel"];
  }
  if (__memoryWired_isset)
  {
    [encoder encodeInt32: __memoryWired forKey: @"memoryWired"];
  }
  if (__memoryActive_isset)
  {
    [encoder encodeInt32: __memoryActive forKey: @"memoryActive"];
  }
  if (__memoryInactive_isset)
  {
    [encoder encodeInt32: __memoryInactive forKey: @"memoryInactive"];
  }
  if (__memoryFree_isset)
  {
    [encoder encodeInt32: __memoryFree forKey: @"memoryFree"];
  }
  if (__memoryUser_isset)
  {
    [encoder encodeInt32: __memoryUser forKey: @"memoryUser"];
  }
  if (__triggeredBy_isset)
  {
    [encoder encodeObject: __triggeredBy forKey: @"triggeredBy"];
  }
  if (__networkStatus_isset)
  {
    [encoder encodeObject: __networkStatus forKey: @"networkStatus"];
  }
  if (__distanceTraveled_isset)
  {
    [encoder encodeDouble: __distanceTraveled forKey: @"distanceTraveled"];
  }
  if (__screenBrightness_isset)
  {
    [encoder encodeInt32: __screenBrightness forKey: @"screenBrightness"];
  }
  if (__networkDetails_isset)
  {
    [encoder encodeObject: __networkDetails forKey: @"networkDetails"];
  }
  if (__batteryDetails_isset)
  {
    [encoder encodeObject: __batteryDetails forKey: @"batteryDetails"];
  }
  if (__cpuStatus_isset)
  {
    [encoder encodeObject: __cpuStatus forKey: @"cpuStatus"];
  }
  if (__locationProviders_isset)
  {
    [encoder encodeObject: __locationProviders forKey: @"locationProviders"];
  }
  if (__callInfo_isset)
  {
    [encoder encodeObject: __callInfo forKey: @"callInfo"];
  }
  if (__screenOn_isset)
  {
    [encoder encodeInt32: __screenOn forKey: @"screenOn"];
  }
  if (__timeZone_isset)
  {
    [encoder encodeObject: __timeZone forKey: @"timeZone"];
  }
  if (__unknownSources_isset)
  {
    [encoder encodeInt32: __unknownSources forKey: @"unknownSources"];
  }
  if (__developerMode_isset)
  {
    [encoder encodeInt32: __developerMode forKey: @"developerMode"];
  }
  if (__extra_isset)
  {
    [encoder encodeObject: __extra forKey: @"extra"];
  }
  if (__settings_isset)
  {
    [encoder encodeObject: __settings forKey: @"settings"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uuId_isset ? 2654435761 : 0;
  if (__uuId_isset)
  {
    hash = (hash * 31) ^ [__uuId hash];
  }
  hash = (hash * 31) ^ __timestamp_isset ? 2654435761 : 0;
  if (__timestamp_isset)
  {
    hash = (hash * 31) ^ [@(__timestamp) hash];
  }
  hash = (hash * 31) ^ __piList_isset ? 2654435761 : 0;
  if (__piList_isset)
  {
    hash = (hash * 31) ^ [__piList hash];
  }
  hash = (hash * 31) ^ __batteryState_isset ? 2654435761 : 0;
  if (__batteryState_isset)
  {
    hash = (hash * 31) ^ [__batteryState hash];
  }
  hash = (hash * 31) ^ __batteryLevel_isset ? 2654435761 : 0;
  if (__batteryLevel_isset)
  {
    hash = (hash * 31) ^ [@(__batteryLevel) hash];
  }
  hash = (hash * 31) ^ __memoryWired_isset ? 2654435761 : 0;
  if (__memoryWired_isset)
  {
    hash = (hash * 31) ^ [@(__memoryWired) hash];
  }
  hash = (hash * 31) ^ __memoryActive_isset ? 2654435761 : 0;
  if (__memoryActive_isset)
  {
    hash = (hash * 31) ^ [@(__memoryActive) hash];
  }
  hash = (hash * 31) ^ __memoryInactive_isset ? 2654435761 : 0;
  if (__memoryInactive_isset)
  {
    hash = (hash * 31) ^ [@(__memoryInactive) hash];
  }
  hash = (hash * 31) ^ __memoryFree_isset ? 2654435761 : 0;
  if (__memoryFree_isset)
  {
    hash = (hash * 31) ^ [@(__memoryFree) hash];
  }
  hash = (hash * 31) ^ __memoryUser_isset ? 2654435761 : 0;
  if (__memoryUser_isset)
  {
    hash = (hash * 31) ^ [@(__memoryUser) hash];
  }
  hash = (hash * 31) ^ __triggeredBy_isset ? 2654435761 : 0;
  if (__triggeredBy_isset)
  {
    hash = (hash * 31) ^ [__triggeredBy hash];
  }
  hash = (hash * 31) ^ __networkStatus_isset ? 2654435761 : 0;
  if (__networkStatus_isset)
  {
    hash = (hash * 31) ^ [__networkStatus hash];
  }
  hash = (hash * 31) ^ __distanceTraveled_isset ? 2654435761 : 0;
  if (__distanceTraveled_isset)
  {
    hash = (hash * 31) ^ [@(__distanceTraveled) hash];
  }
  hash = (hash * 31) ^ __screenBrightness_isset ? 2654435761 : 0;
  if (__screenBrightness_isset)
  {
    hash = (hash * 31) ^ [@(__screenBrightness) hash];
  }
  hash = (hash * 31) ^ __networkDetails_isset ? 2654435761 : 0;
  if (__networkDetails_isset)
  {
    hash = (hash * 31) ^ [__networkDetails hash];
  }
  hash = (hash * 31) ^ __batteryDetails_isset ? 2654435761 : 0;
  if (__batteryDetails_isset)
  {
    hash = (hash * 31) ^ [__batteryDetails hash];
  }
  hash = (hash * 31) ^ __cpuStatus_isset ? 2654435761 : 0;
  if (__cpuStatus_isset)
  {
    hash = (hash * 31) ^ [__cpuStatus hash];
  }
  hash = (hash * 31) ^ __locationProviders_isset ? 2654435761 : 0;
  if (__locationProviders_isset)
  {
    hash = (hash * 31) ^ [__locationProviders hash];
  }
  hash = (hash * 31) ^ __callInfo_isset ? 2654435761 : 0;
  if (__callInfo_isset)
  {
    hash = (hash * 31) ^ [__callInfo hash];
  }
  hash = (hash * 31) ^ __screenOn_isset ? 2654435761 : 0;
  if (__screenOn_isset)
  {
    hash = (hash * 31) ^ [@(__screenOn) hash];
  }
  hash = (hash * 31) ^ __timeZone_isset ? 2654435761 : 0;
  if (__timeZone_isset)
  {
    hash = (hash * 31) ^ [__timeZone hash];
  }
  hash = (hash * 31) ^ __unknownSources_isset ? 2654435761 : 0;
  if (__unknownSources_isset)
  {
    hash = (hash * 31) ^ [@(__unknownSources) hash];
  }
  hash = (hash * 31) ^ __developerMode_isset ? 2654435761 : 0;
  if (__developerMode_isset)
  {
    hash = (hash * 31) ^ [@(__developerMode) hash];
  }
  hash = (hash * 31) ^ __extra_isset ? 2654435761 : 0;
  if (__extra_isset)
  {
    hash = (hash * 31) ^ [__extra hash];
  }
  hash = (hash * 31) ^ __settings_isset ? 2654435761 : 0;
  if (__settings_isset)
  {
    hash = (hash * 31) ^ [__settings hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Sample class]]) {
    return NO;
  }
  Sample *other = (Sample *)anObject;
  if ((__uuId_isset != other->__uuId_isset) ||
      (__uuId_isset && ((__uuId || other->__uuId) && ![__uuId isEqual:other->__uuId]))) {
    return NO;
  }
  if ((__timestamp_isset != other->__timestamp_isset) ||
      (__timestamp_isset && (__timestamp != other->__timestamp))) {
    return NO;
  }
  if ((__piList_isset != other->__piList_isset) ||
      (__piList_isset && ((__piList || other->__piList) && ![__piList isEqual:other->__piList]))) {
    return NO;
  }
  if ((__batteryState_isset != other->__batteryState_isset) ||
      (__batteryState_isset && ((__batteryState || other->__batteryState) && ![__batteryState isEqual:other->__batteryState]))) {
    return NO;
  }
  if ((__batteryLevel_isset != other->__batteryLevel_isset) ||
      (__batteryLevel_isset && (__batteryLevel != other->__batteryLevel))) {
    return NO;
  }
  if ((__memoryWired_isset != other->__memoryWired_isset) ||
      (__memoryWired_isset && (__memoryWired != other->__memoryWired))) {
    return NO;
  }
  if ((__memoryActive_isset != other->__memoryActive_isset) ||
      (__memoryActive_isset && (__memoryActive != other->__memoryActive))) {
    return NO;
  }
  if ((__memoryInactive_isset != other->__memoryInactive_isset) ||
      (__memoryInactive_isset && (__memoryInactive != other->__memoryInactive))) {
    return NO;
  }
  if ((__memoryFree_isset != other->__memoryFree_isset) ||
      (__memoryFree_isset && (__memoryFree != other->__memoryFree))) {
    return NO;
  }
  if ((__memoryUser_isset != other->__memoryUser_isset) ||
      (__memoryUser_isset && (__memoryUser != other->__memoryUser))) {
    return NO;
  }
  if ((__triggeredBy_isset != other->__triggeredBy_isset) ||
      (__triggeredBy_isset && ((__triggeredBy || other->__triggeredBy) && ![__triggeredBy isEqual:other->__triggeredBy]))) {
    return NO;
  }
  if ((__networkStatus_isset != other->__networkStatus_isset) ||
      (__networkStatus_isset && ((__networkStatus || other->__networkStatus) && ![__networkStatus isEqual:other->__networkStatus]))) {
    return NO;
  }
  if ((__distanceTraveled_isset != other->__distanceTraveled_isset) ||
      (__distanceTraveled_isset && (__distanceTraveled != other->__distanceTraveled))) {
    return NO;
  }
  if ((__screenBrightness_isset != other->__screenBrightness_isset) ||
      (__screenBrightness_isset && (__screenBrightness != other->__screenBrightness))) {
    return NO;
  }
  if ((__networkDetails_isset != other->__networkDetails_isset) ||
      (__networkDetails_isset && ((__networkDetails || other->__networkDetails) && ![__networkDetails isEqual:other->__networkDetails]))) {
    return NO;
  }
  if ((__batteryDetails_isset != other->__batteryDetails_isset) ||
      (__batteryDetails_isset && ((__batteryDetails || other->__batteryDetails) && ![__batteryDetails isEqual:other->__batteryDetails]))) {
    return NO;
  }
  if ((__cpuStatus_isset != other->__cpuStatus_isset) ||
      (__cpuStatus_isset && ((__cpuStatus || other->__cpuStatus) && ![__cpuStatus isEqual:other->__cpuStatus]))) {
    return NO;
  }
  if ((__locationProviders_isset != other->__locationProviders_isset) ||
      (__locationProviders_isset && ((__locationProviders || other->__locationProviders) && ![__locationProviders isEqual:other->__locationProviders]))) {
    return NO;
  }
  if ((__callInfo_isset != other->__callInfo_isset) ||
      (__callInfo_isset && ((__callInfo || other->__callInfo) && ![__callInfo isEqual:other->__callInfo]))) {
    return NO;
  }
  if ((__screenOn_isset != other->__screenOn_isset) ||
      (__screenOn_isset && (__screenOn != other->__screenOn))) {
    return NO;
  }
  if ((__timeZone_isset != other->__timeZone_isset) ||
      (__timeZone_isset && ((__timeZone || other->__timeZone) && ![__timeZone isEqual:other->__timeZone]))) {
    return NO;
  }
  if ((__unknownSources_isset != other->__unknownSources_isset) ||
      (__unknownSources_isset && (__unknownSources != other->__unknownSources))) {
    return NO;
  }
  if ((__developerMode_isset != other->__developerMode_isset) ||
      (__developerMode_isset && (__developerMode != other->__developerMode))) {
    return NO;
  }
  if ((__extra_isset != other->__extra_isset) ||
      (__extra_isset && ((__extra || other->__extra) && ![__extra isEqual:other->__extra]))) {
    return NO;
  }
  if ((__settings_isset != other->__settings_isset) ||
      (__settings_isset && ((__settings || other->__settings) && ![__settings isEqual:other->__settings]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uuId release_stub];
  [__piList release_stub];
  [__batteryState release_stub];
  [__triggeredBy release_stub];
  [__networkStatus release_stub];
  [__networkDetails release_stub];
  [__batteryDetails release_stub];
  [__cpuStatus release_stub];
  [__locationProviders release_stub];
  [__callInfo release_stub];
  [__timeZone release_stub];
  [__extra release_stub];
  [__settings release_stub];
  [super dealloc_stub];
}

- (NSString *) uuId {
  return [[__uuId retain_stub] autorelease_stub];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain_stub];
  [__uuId release_stub];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release_stub];
  __uuId = nil;
  __uuId_isset = NO;
}

- (double) timestamp {
  return __timestamp;
}

- (void) setTimestamp: (double) timestamp {
  __timestamp = timestamp;
  __timestamp_isset = YES;
}

- (BOOL) timestampIsSet {
  return __timestamp_isset;
}

- (void) unsetTimestamp {
  __timestamp_isset = NO;
}

- (NSMutableArray *) piList {
  return [[__piList retain_stub] autorelease_stub];
}

- (void) setPiList: (NSMutableArray *) piList {
  [piList retain_stub];
  [__piList release_stub];
  __piList = piList;
  __piList_isset = YES;
}

- (BOOL) piListIsSet {
  return __piList_isset;
}

- (void) unsetPiList {
  [__piList release_stub];
  __piList = nil;
  __piList_isset = NO;
}

- (NSString *) batteryState {
  return [[__batteryState retain_stub] autorelease_stub];
}

- (void) setBatteryState: (NSString *) batteryState {
  [batteryState retain_stub];
  [__batteryState release_stub];
  __batteryState = batteryState;
  __batteryState_isset = YES;
}

- (BOOL) batteryStateIsSet {
  return __batteryState_isset;
}

- (void) unsetBatteryState {
  [__batteryState release_stub];
  __batteryState = nil;
  __batteryState_isset = NO;
}

- (double) batteryLevel {
  return __batteryLevel;
}

- (void) setBatteryLevel: (double) batteryLevel {
  __batteryLevel = batteryLevel;
  __batteryLevel_isset = YES;
}

- (BOOL) batteryLevelIsSet {
  return __batteryLevel_isset;
}

- (void) unsetBatteryLevel {
  __batteryLevel_isset = NO;
}

- (int32_t) memoryWired {
  return __memoryWired;
}

- (void) setMemoryWired: (int32_t) memoryWired {
  __memoryWired = memoryWired;
  __memoryWired_isset = YES;
}

- (BOOL) memoryWiredIsSet {
  return __memoryWired_isset;
}

- (void) unsetMemoryWired {
  __memoryWired_isset = NO;
}

- (int32_t) memoryActive {
  return __memoryActive;
}

- (void) setMemoryActive: (int32_t) memoryActive {
  __memoryActive = memoryActive;
  __memoryActive_isset = YES;
}

- (BOOL) memoryActiveIsSet {
  return __memoryActive_isset;
}

- (void) unsetMemoryActive {
  __memoryActive_isset = NO;
}

- (int32_t) memoryInactive {
  return __memoryInactive;
}

- (void) setMemoryInactive: (int32_t) memoryInactive {
  __memoryInactive = memoryInactive;
  __memoryInactive_isset = YES;
}

- (BOOL) memoryInactiveIsSet {
  return __memoryInactive_isset;
}

- (void) unsetMemoryInactive {
  __memoryInactive_isset = NO;
}

- (int32_t) memoryFree {
  return __memoryFree;
}

- (void) setMemoryFree: (int32_t) memoryFree {
  __memoryFree = memoryFree;
  __memoryFree_isset = YES;
}

- (BOOL) memoryFreeIsSet {
  return __memoryFree_isset;
}

- (void) unsetMemoryFree {
  __memoryFree_isset = NO;
}

- (int32_t) memoryUser {
  return __memoryUser;
}

- (void) setMemoryUser: (int32_t) memoryUser {
  __memoryUser = memoryUser;
  __memoryUser_isset = YES;
}

- (BOOL) memoryUserIsSet {
  return __memoryUser_isset;
}

- (void) unsetMemoryUser {
  __memoryUser_isset = NO;
}

- (NSString *) triggeredBy {
  return [[__triggeredBy retain_stub] autorelease_stub];
}

- (void) setTriggeredBy: (NSString *) triggeredBy {
  [triggeredBy retain_stub];
  [__triggeredBy release_stub];
  __triggeredBy = triggeredBy;
  __triggeredBy_isset = YES;
}

- (BOOL) triggeredByIsSet {
  return __triggeredBy_isset;
}

- (void) unsetTriggeredBy {
  [__triggeredBy release_stub];
  __triggeredBy = nil;
  __triggeredBy_isset = NO;
}

- (NSString *) networkStatus {
  return [[__networkStatus retain_stub] autorelease_stub];
}

- (void) setNetworkStatus: (NSString *) networkStatus {
  [networkStatus retain_stub];
  [__networkStatus release_stub];
  __networkStatus = networkStatus;
  __networkStatus_isset = YES;
}

- (BOOL) networkStatusIsSet {
  return __networkStatus_isset;
}

- (void) unsetNetworkStatus {
  [__networkStatus release_stub];
  __networkStatus = nil;
  __networkStatus_isset = NO;
}

- (double) distanceTraveled {
  return __distanceTraveled;
}

- (void) setDistanceTraveled: (double) distanceTraveled {
  __distanceTraveled = distanceTraveled;
  __distanceTraveled_isset = YES;
}

- (BOOL) distanceTraveledIsSet {
  return __distanceTraveled_isset;
}

- (void) unsetDistanceTraveled {
  __distanceTraveled_isset = NO;
}

- (int32_t) screenBrightness {
  return __screenBrightness;
}

- (void) setScreenBrightness: (int32_t) screenBrightness {
  __screenBrightness = screenBrightness;
  __screenBrightness_isset = YES;
}

- (BOOL) screenBrightnessIsSet {
  return __screenBrightness_isset;
}

- (void) unsetScreenBrightness {
  __screenBrightness_isset = NO;
}

- (NetworkDetails *) networkDetails {
  return [[__networkDetails retain_stub] autorelease_stub];
}

- (void) setNetworkDetails: (NetworkDetails *) networkDetails {
  [networkDetails retain_stub];
  [__networkDetails release_stub];
  __networkDetails = networkDetails;
  __networkDetails_isset = YES;
}

- (BOOL) networkDetailsIsSet {
  return __networkDetails_isset;
}

- (void) unsetNetworkDetails {
  [__networkDetails release_stub];
  __networkDetails = nil;
  __networkDetails_isset = NO;
}

- (BatteryDetails *) batteryDetails {
  return [[__batteryDetails retain_stub] autorelease_stub];
}

- (void) setBatteryDetails: (BatteryDetails *) batteryDetails {
  [batteryDetails retain_stub];
  [__batteryDetails release_stub];
  __batteryDetails = batteryDetails;
  __batteryDetails_isset = YES;
}

- (BOOL) batteryDetailsIsSet {
  return __batteryDetails_isset;
}

- (void) unsetBatteryDetails {
  [__batteryDetails release_stub];
  __batteryDetails = nil;
  __batteryDetails_isset = NO;
}

- (CpuStatus *) cpuStatus {
  return [[__cpuStatus retain_stub] autorelease_stub];
}

- (void) setCpuStatus: (CpuStatus *) cpuStatus {
  [cpuStatus retain_stub];
  [__cpuStatus release_stub];
  __cpuStatus = cpuStatus;
  __cpuStatus_isset = YES;
}

- (BOOL) cpuStatusIsSet {
  return __cpuStatus_isset;
}

- (void) unsetCpuStatus {
  [__cpuStatus release_stub];
  __cpuStatus = nil;
  __cpuStatus_isset = NO;
}

- (NSMutableArray *) locationProviders {
  return [[__locationProviders retain_stub] autorelease_stub];
}

- (void) setLocationProviders: (NSMutableArray *) locationProviders {
  [locationProviders retain_stub];
  [__locationProviders release_stub];
  __locationProviders = locationProviders;
  __locationProviders_isset = YES;
}

- (BOOL) locationProvidersIsSet {
  return __locationProviders_isset;
}

- (void) unsetLocationProviders {
  [__locationProviders release_stub];
  __locationProviders = nil;
  __locationProviders_isset = NO;
}

- (CallInfo *) callInfo {
  return [[__callInfo retain_stub] autorelease_stub];
}

- (void) setCallInfo: (CallInfo *) callInfo {
  [callInfo retain_stub];
  [__callInfo release_stub];
  __callInfo = callInfo;
  __callInfo_isset = YES;
}

- (BOOL) callInfoIsSet {
  return __callInfo_isset;
}

- (void) unsetCallInfo {
  [__callInfo release_stub];
  __callInfo = nil;
  __callInfo_isset = NO;
}

- (int32_t) screenOn {
  return __screenOn;
}

- (void) setScreenOn: (int32_t) screenOn {
  __screenOn = screenOn;
  __screenOn_isset = YES;
}

- (BOOL) screenOnIsSet {
  return __screenOn_isset;
}

- (void) unsetScreenOn {
  __screenOn_isset = NO;
}

- (NSString *) timeZone {
  return [[__timeZone retain_stub] autorelease_stub];
}

- (void) setTimeZone: (NSString *) timeZone {
  [timeZone retain_stub];
  [__timeZone release_stub];
  __timeZone = timeZone;
  __timeZone_isset = YES;
}

- (BOOL) timeZoneIsSet {
  return __timeZone_isset;
}

- (void) unsetTimeZone {
  [__timeZone release_stub];
  __timeZone = nil;
  __timeZone_isset = NO;
}

- (int32_t) unknownSources {
  return __unknownSources;
}

- (void) setUnknownSources: (int32_t) unknownSources {
  __unknownSources = unknownSources;
  __unknownSources_isset = YES;
}

- (BOOL) unknownSourcesIsSet {
  return __unknownSources_isset;
}

- (void) unsetUnknownSources {
  __unknownSources_isset = NO;
}

- (int32_t) developerMode {
  return __developerMode;
}

- (void) setDeveloperMode: (int32_t) developerMode {
  __developerMode = developerMode;
  __developerMode_isset = YES;
}

- (BOOL) developerModeIsSet {
  return __developerMode_isset;
}

- (void) unsetDeveloperMode {
  __developerMode_isset = NO;
}

- (NSMutableArray *) extra {
  return [[__extra retain_stub] autorelease_stub];
}

- (void) setExtra: (NSMutableArray *) extra {
  [extra retain_stub];
  [__extra release_stub];
  __extra = extra;
  __extra_isset = YES;
}

- (BOOL) extraIsSet {
  return __extra_isset;
}

- (void) unsetExtra {
  [__extra release_stub];
  __extra = nil;
  __extra_isset = NO;
}

- (Settings *) settings {
  return [[__settings retain_stub] autorelease_stub];
}

- (void) setSettings: (Settings *) settings {
  [settings retain_stub];
  [__settings release_stub];
  __settings = settings;
  __settings_isset = YES;
}

- (BOOL) settingsIsSet {
  return __settings_isset;
}

- (void) unsetSettings {
  [__settings release_stub];
  __settings = nil;
  __settings_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setTimestamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            ProcessInfo *_elem7 = [[ProcessInfo alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setPiList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBatteryState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setBatteryLevel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryWired: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryActive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryInactive: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryFree: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setMemoryUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTriggeredBy: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNetworkStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setDistanceTraveled: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScreenBrightness: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRUCT) {
          NetworkDetails *fieldValue = [[NetworkDetails alloc] init];
          [fieldValue read: inProtocol];
          [self setNetworkDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRUCT) {
          BatteryDetails *fieldValue = [[BatteryDetails alloc] init];
          [fieldValue read: inProtocol];
          [self setBatteryDetails: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_STRUCT) {
          CpuStatus *fieldValue = [[CpuStatus alloc] init];
          [fieldValue read: inProtocol];
          [self setCpuStatus: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_LIST) {
          int _size8;
          [inProtocol readListBeginReturningElementType: NULL size: &_size8];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size8];
          int _i9;
          for (_i9 = 0; _i9 < _size8; ++_i9)
          {
            NSString * _elem10 = [inProtocol readString];
            [fieldValue addObject: _elem10];
          }
          [inProtocol readListEnd];
          [self setLocationProviders: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_STRUCT) {
          CallInfo *fieldValue = [[CallInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setCallInfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setScreenOn: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTimeZone: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUnknownSources: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDeveloperMode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            Feature *_elem13 = [[Feature alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readListEnd];
          [self setExtra: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_STRUCT) {
          Settings *fieldValue = [[Settings alloc] init];
          [fieldValue read: inProtocol];
          [self setSettings: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Sample"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__timestamp_isset) {
    [outProtocol writeFieldBeginWithName: @"timestamp" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __timestamp];
    [outProtocol writeFieldEnd];
  }
  if (__piList_isset) {
    if (__piList != nil) {
      [outProtocol writeFieldBeginWithName: @"piList" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__piList count]];
        int idx15;
        for (idx15 = 0; idx15 < [__piList count]; idx15++)
        {
          [[__piList objectAtIndex: idx15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryState_isset) {
    if (__batteryState != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryState" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __batteryState];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryLevel_isset) {
    [outProtocol writeFieldBeginWithName: @"batteryLevel" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __batteryLevel];
    [outProtocol writeFieldEnd];
  }
  if (__memoryWired_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryWired" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __memoryWired];
    [outProtocol writeFieldEnd];
  }
  if (__memoryActive_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryActive" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __memoryActive];
    [outProtocol writeFieldEnd];
  }
  if (__memoryInactive_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryInactive" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __memoryInactive];
    [outProtocol writeFieldEnd];
  }
  if (__memoryFree_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryFree" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __memoryFree];
    [outProtocol writeFieldEnd];
  }
  if (__memoryUser_isset) {
    [outProtocol writeFieldBeginWithName: @"memoryUser" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __memoryUser];
    [outProtocol writeFieldEnd];
  }
  if (__triggeredBy_isset) {
    if (__triggeredBy != nil) {
      [outProtocol writeFieldBeginWithName: @"triggeredBy" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __triggeredBy];
      [outProtocol writeFieldEnd];
    }
  }
  if (__networkStatus_isset) {
    if (__networkStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"networkStatus" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __networkStatus];
      [outProtocol writeFieldEnd];
    }
  }
  if (__distanceTraveled_isset) {
    [outProtocol writeFieldBeginWithName: @"distanceTraveled" type: TType_DOUBLE fieldID: 13];
    [outProtocol writeDouble: __distanceTraveled];
    [outProtocol writeFieldEnd];
  }
  if (__screenBrightness_isset) {
    [outProtocol writeFieldBeginWithName: @"screenBrightness" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __screenBrightness];
    [outProtocol writeFieldEnd];
  }
  if (__networkDetails_isset) {
    if (__networkDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"networkDetails" type: TType_STRUCT fieldID: 15];
      [__networkDetails write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__batteryDetails_isset) {
    if (__batteryDetails != nil) {
      [outProtocol writeFieldBeginWithName: @"batteryDetails" type: TType_STRUCT fieldID: 16];
      [__batteryDetails write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cpuStatus_isset) {
    if (__cpuStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"cpuStatus" type: TType_STRUCT fieldID: 17];
      [__cpuStatus write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__locationProviders_isset) {
    if (__locationProviders != nil) {
      [outProtocol writeFieldBeginWithName: @"locationProviders" type: TType_LIST fieldID: 18];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__locationProviders count]];
        int idx17;
        for (idx17 = 0; idx17 < [__locationProviders count]; idx17++)
        {
          [outProtocol writeString: [__locationProviders objectAtIndex: idx17]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__callInfo_isset) {
    if (__callInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"callInfo" type: TType_STRUCT fieldID: 19];
      [__callInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__screenOn_isset) {
    [outProtocol writeFieldBeginWithName: @"screenOn" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __screenOn];
    [outProtocol writeFieldEnd];
  }
  if (__timeZone_isset) {
    if (__timeZone != nil) {
      [outProtocol writeFieldBeginWithName: @"timeZone" type: TType_STRING fieldID: 21];
      [outProtocol writeString: __timeZone];
      [outProtocol writeFieldEnd];
    }
  }
  if (__unknownSources_isset) {
    [outProtocol writeFieldBeginWithName: @"unknownSources" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __unknownSources];
    [outProtocol writeFieldEnd];
  }
  if (__developerMode_isset) {
    [outProtocol writeFieldBeginWithName: @"developerMode" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __developerMode];
    [outProtocol writeFieldEnd];
  }
  if (__extra_isset) {
    if (__extra != nil) {
      [outProtocol writeFieldBeginWithName: @"extra" type: TType_LIST fieldID: 24];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__extra count]];
        int idx19;
        for (idx19 = 0; idx19 < [__extra count]; idx19++)
        {
          [[__extra objectAtIndex: idx19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__settings_isset) {
    if (__settings != nil) {
      [outProtocol writeFieldBeginWithName: @"settings" type: TType_STRUCT fieldID: 25];
      [__settings write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__uuId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uuId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Sample("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",timestamp:"];
  [ms appendFormat: @"%f", __timestamp];
  [ms appendString: @",piList:"];
  [ms appendFormat: @"%@", __piList];
  [ms appendString: @",batteryState:"];
  [ms appendFormat: @"\"%@\"", __batteryState];
  [ms appendString: @",batteryLevel:"];
  [ms appendFormat: @"%f", __batteryLevel];
  [ms appendString: @",memoryWired:"];
  [ms appendFormat: @"%i", __memoryWired];
  [ms appendString: @",memoryActive:"];
  [ms appendFormat: @"%i", __memoryActive];
  [ms appendString: @",memoryInactive:"];
  [ms appendFormat: @"%i", __memoryInactive];
  [ms appendString: @",memoryFree:"];
  [ms appendFormat: @"%i", __memoryFree];
  [ms appendString: @",memoryUser:"];
  [ms appendFormat: @"%i", __memoryUser];
  [ms appendString: @",triggeredBy:"];
  [ms appendFormat: @"\"%@\"", __triggeredBy];
  [ms appendString: @",networkStatus:"];
  [ms appendFormat: @"\"%@\"", __networkStatus];
  [ms appendString: @",distanceTraveled:"];
  [ms appendFormat: @"%f", __distanceTraveled];
  [ms appendString: @",screenBrightness:"];
  [ms appendFormat: @"%i", __screenBrightness];
  [ms appendString: @",networkDetails:"];
  [ms appendFormat: @"%@", __networkDetails];
  [ms appendString: @",batteryDetails:"];
  [ms appendFormat: @"%@", __batteryDetails];
  [ms appendString: @",cpuStatus:"];
  [ms appendFormat: @"%@", __cpuStatus];
  [ms appendString: @",locationProviders:"];
  [ms appendFormat: @"%@", __locationProviders];
  [ms appendString: @",callInfo:"];
  [ms appendFormat: @"%@", __callInfo];
  [ms appendString: @",screenOn:"];
  [ms appendFormat: @"%i", __screenOn];
  [ms appendString: @",timeZone:"];
  [ms appendFormat: @"\"%@\"", __timeZone];
  [ms appendString: @",unknownSources:"];
  [ms appendFormat: @"%i", __unknownSources];
  [ms appendString: @",developerMode:"];
  [ms appendFormat: @"%i", __developerMode];
  [ms appendString: @",extra:"];
  [ms appendFormat: @"%@", __extra];
  [ms appendString: @",settings:"];
  [ms appendFormat: @"%@", __settings];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DetailScreenReport

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithScore: (double) score xVals: (NSMutableArray *) xVals yVals: (NSMutableArray *) yVals expectedValue: (double) expectedValue error: (double) error errorWithout: (double) errorWithout samples: (double) samples samplesWithout: (double) samplesWithout
{
  self = [super init];
  __score = score;
  __score_isset = YES;
  __xVals = [xVals retain_stub];
  __xVals_isset = YES;
  __yVals = [yVals retain_stub];
  __yVals_isset = YES;
  __expectedValue = expectedValue;
  __expectedValue_isset = YES;
  __error = error;
  __error_isset = YES;
  __errorWithout = errorWithout;
  __errorWithout_isset = YES;
  __samples = samples;
  __samples_isset = YES;
  __samplesWithout = samplesWithout;
  __samplesWithout_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"score"])
  {
    __score = [decoder decodeDoubleForKey: @"score"];
    __score_isset = YES;
  }
  if ([decoder containsValueForKey: @"xVals"])
  {
    __xVals = [[decoder decodeObjectForKey: @"xVals"] retain_stub];
    __xVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"yVals"])
  {
    __yVals = [[decoder decodeObjectForKey: @"yVals"] retain_stub];
    __yVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"expectedValue"])
  {
    __expectedValue = [decoder decodeDoubleForKey: @"expectedValue"];
    __expectedValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [decoder decodeDoubleForKey: @"error"];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorWithout"])
  {
    __errorWithout = [decoder decodeDoubleForKey: @"errorWithout"];
    __errorWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"samples"])
  {
    __samples = [decoder decodeDoubleForKey: @"samples"];
    __samples_isset = YES;
  }
  if ([decoder containsValueForKey: @"samplesWithout"])
  {
    __samplesWithout = [decoder decodeDoubleForKey: @"samplesWithout"];
    __samplesWithout_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__score_isset)
  {
    [encoder encodeDouble: __score forKey: @"score"];
  }
  if (__xVals_isset)
  {
    [encoder encodeObject: __xVals forKey: @"xVals"];
  }
  if (__yVals_isset)
  {
    [encoder encodeObject: __yVals forKey: @"yVals"];
  }
  if (__expectedValue_isset)
  {
    [encoder encodeDouble: __expectedValue forKey: @"expectedValue"];
  }
  if (__error_isset)
  {
    [encoder encodeDouble: __error forKey: @"error"];
  }
  if (__errorWithout_isset)
  {
    [encoder encodeDouble: __errorWithout forKey: @"errorWithout"];
  }
  if (__samples_isset)
  {
    [encoder encodeDouble: __samples forKey: @"samples"];
  }
  if (__samplesWithout_isset)
  {
    [encoder encodeDouble: __samplesWithout forKey: @"samplesWithout"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __score_isset ? 2654435761 : 0;
  if (__score_isset)
  {
    hash = (hash * 31) ^ [@(__score) hash];
  }
  hash = (hash * 31) ^ __xVals_isset ? 2654435761 : 0;
  if (__xVals_isset)
  {
    hash = (hash * 31) ^ [__xVals hash];
  }
  hash = (hash * 31) ^ __yVals_isset ? 2654435761 : 0;
  if (__yVals_isset)
  {
    hash = (hash * 31) ^ [__yVals hash];
  }
  hash = (hash * 31) ^ __expectedValue_isset ? 2654435761 : 0;
  if (__expectedValue_isset)
  {
    hash = (hash * 31) ^ [@(__expectedValue) hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [@(__error) hash];
  }
  hash = (hash * 31) ^ __errorWithout_isset ? 2654435761 : 0;
  if (__errorWithout_isset)
  {
    hash = (hash * 31) ^ [@(__errorWithout) hash];
  }
  hash = (hash * 31) ^ __samples_isset ? 2654435761 : 0;
  if (__samples_isset)
  {
    hash = (hash * 31) ^ [@(__samples) hash];
  }
  hash = (hash * 31) ^ __samplesWithout_isset ? 2654435761 : 0;
  if (__samplesWithout_isset)
  {
    hash = (hash * 31) ^ [@(__samplesWithout) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DetailScreenReport class]]) {
    return NO;
  }
  DetailScreenReport *other = (DetailScreenReport *)anObject;
  if ((__score_isset != other->__score_isset) ||
      (__score_isset && (__score != other->__score))) {
    return NO;
  }
  if ((__xVals_isset != other->__xVals_isset) ||
      (__xVals_isset && ((__xVals || other->__xVals) && ![__xVals isEqual:other->__xVals]))) {
    return NO;
  }
  if ((__yVals_isset != other->__yVals_isset) ||
      (__yVals_isset && ((__yVals || other->__yVals) && ![__yVals isEqual:other->__yVals]))) {
    return NO;
  }
  if ((__expectedValue_isset != other->__expectedValue_isset) ||
      (__expectedValue_isset && (__expectedValue != other->__expectedValue))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && (__error != other->__error))) {
    return NO;
  }
  if ((__errorWithout_isset != other->__errorWithout_isset) ||
      (__errorWithout_isset && (__errorWithout != other->__errorWithout))) {
    return NO;
  }
  if ((__samples_isset != other->__samples_isset) ||
      (__samples_isset && (__samples != other->__samples))) {
    return NO;
  }
  if ((__samplesWithout_isset != other->__samplesWithout_isset) ||
      (__samplesWithout_isset && (__samplesWithout != other->__samplesWithout))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__xVals release_stub];
  [__yVals release_stub];
  [super dealloc_stub];
}

- (double) score {
  return __score;
}

- (void) setScore: (double) score {
  __score = score;
  __score_isset = YES;
}

- (BOOL) scoreIsSet {
  return __score_isset;
}

- (void) unsetScore {
  __score_isset = NO;
}

- (NSMutableArray *) xVals {
  return [[__xVals retain_stub] autorelease_stub];
}

- (void) setXVals: (NSMutableArray *) xVals {
  [xVals retain_stub];
  [__xVals release_stub];
  __xVals = xVals;
  __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
  return __xVals_isset;
}

- (void) unsetXVals {
  [__xVals release_stub];
  __xVals = nil;
  __xVals_isset = NO;
}

- (NSMutableArray *) yVals {
  return [[__yVals retain_stub] autorelease_stub];
}

- (void) setYVals: (NSMutableArray *) yVals {
  [yVals retain_stub];
  [__yVals release_stub];
  __yVals = yVals;
  __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
  return __yVals_isset;
}

- (void) unsetYVals {
  [__yVals release_stub];
  __yVals = nil;
  __yVals_isset = NO;
}

- (double) expectedValue {
  return __expectedValue;
}

- (void) setExpectedValue: (double) expectedValue {
  __expectedValue = expectedValue;
  __expectedValue_isset = YES;
}

- (BOOL) expectedValueIsSet {
  return __expectedValue_isset;
}

- (void) unsetExpectedValue {
  __expectedValue_isset = NO;
}

- (double) error {
  return __error;
}

- (void) setError: (double) error {
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  __error_isset = NO;
}

- (double) errorWithout {
  return __errorWithout;
}

- (void) setErrorWithout: (double) errorWithout {
  __errorWithout = errorWithout;
  __errorWithout_isset = YES;
}

- (BOOL) errorWithoutIsSet {
  return __errorWithout_isset;
}

- (void) unsetErrorWithout {
  __errorWithout_isset = NO;
}

- (double) samples {
  return __samples;
}

- (void) setSamples: (double) samples {
  __samples = samples;
  __samples_isset = YES;
}

- (BOOL) samplesIsSet {
  return __samples_isset;
}

- (void) unsetSamples {
  __samples_isset = NO;
}

- (double) samplesWithout {
  return __samplesWithout;
}

- (void) setSamplesWithout: (double) samplesWithout {
  __samplesWithout = samplesWithout;
  __samplesWithout_isset = YES;
}

- (BOOL) samplesWithoutIsSet {
  return __samplesWithout_isset;
}

- (void) unsetSamplesWithout {
  __samplesWithout_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            double _elem22 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem22]];
          }
          [inProtocol readListEnd];
          [self setXVals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size23;
          [inProtocol readListBeginReturningElementType: NULL size: &_size23];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
          int _i24;
          for (_i24 = 0; _i24 < _size23; ++_i24)
          {
            double _elem25 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem25]];
          }
          [inProtocol readListEnd];
          [self setYVals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setExpectedValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setError: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setErrorWithout: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSamples: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSamplesWithout: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DetailScreenReport"];
  if (__score_isset) {
    [outProtocol writeFieldBeginWithName: @"score" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __score];
    [outProtocol writeFieldEnd];
  }
  if (__xVals_isset) {
    if (__xVals != nil) {
      [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
        int idx27;
        for (idx27 = 0; idx27 < [__xVals count]; idx27++)
        {
          [outProtocol writeDouble: [[__xVals objectAtIndex: idx27] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yVals_isset) {
    if (__yVals != nil) {
      [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
        int idx29;
        for (idx29 = 0; idx29 < [__yVals count]; idx29++)
        {
          [outProtocol writeDouble: [[__yVals objectAtIndex: idx29] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__expectedValue_isset) {
    [outProtocol writeFieldBeginWithName: @"expectedValue" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __expectedValue];
    [outProtocol writeFieldEnd];
  }
  if (__error_isset) {
    [outProtocol writeFieldBeginWithName: @"error" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __error];
    [outProtocol writeFieldEnd];
  }
  if (__errorWithout_isset) {
    [outProtocol writeFieldBeginWithName: @"errorWithout" type: TType_DOUBLE fieldID: 6];
    [outProtocol writeDouble: __errorWithout];
    [outProtocol writeFieldEnd];
  }
  if (__samples_isset) {
    [outProtocol writeFieldBeginWithName: @"samples" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __samples];
    [outProtocol writeFieldEnd];
  }
  if (__samplesWithout_isset) {
    [outProtocol writeFieldBeginWithName: @"samplesWithout" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __samplesWithout];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DetailScreenReport("];
  [ms appendString: @"score:"];
  [ms appendFormat: @"%f", __score];
  [ms appendString: @",xVals:"];
  [ms appendFormat: @"%@", __xVals];
  [ms appendString: @",yVals:"];
  [ms appendFormat: @"%@", __yVals];
  [ms appendString: @",expectedValue:"];
  [ms appendFormat: @"%f", __expectedValue];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%f", __error];
  [ms appendString: @",errorWithout:"];
  [ms appendFormat: @"%f", __errorWithout];
  [ms appendString: @",samples:"];
  [ms appendFormat: @"%f", __samples];
  [ms appendString: @",samplesWithout:"];
  [ms appendFormat: @"%f", __samplesWithout];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Reports

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithJScore: (double) jScore os: (DetailScreenReport *) os osWithout: (DetailScreenReport *) osWithout model: (DetailScreenReport *) model modelWithout: (DetailScreenReport *) modelWithout similarApps: (DetailScreenReport *) similarApps similarAppsWithout: (DetailScreenReport *) similarAppsWithout changeSinceLastWeek: (double) changeSinceLastWeek changeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage jScoreWith: (DetailScreenReport *) jScoreWith jScoreWithout: (DetailScreenReport *) jScoreWithout
{
  self = [super init];
  __jScore = jScore;
  __jScore_isset = YES;
  __os = [os retain_stub];
  __os_isset = YES;
  __osWithout = [osWithout retain_stub];
  __osWithout_isset = YES;
  __model = [model retain_stub];
  __model_isset = YES;
  __modelWithout = [modelWithout retain_stub];
  __modelWithout_isset = YES;
  __similarApps = [similarApps retain_stub];
  __similarApps_isset = YES;
  __similarAppsWithout = [similarAppsWithout retain_stub];
  __similarAppsWithout_isset = YES;
  __changeSinceLastWeek = changeSinceLastWeek;
  __changeSinceLastWeek_isset = YES;
  __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
  __changeSinceLastWeekPercentage_isset = YES;
  __jScoreWith = [jScoreWith retain_stub];
  __jScoreWith_isset = YES;
  __jScoreWithout = [jScoreWithout retain_stub];
  __jScoreWithout_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"jScore"])
  {
    __jScore = [decoder decodeDoubleForKey: @"jScore"];
    __jScore_isset = YES;
  }
  if ([decoder containsValueForKey: @"os"])
  {
    __os = [[decoder decodeObjectForKey: @"os"] retain_stub];
    __os_isset = YES;
  }
  if ([decoder containsValueForKey: @"osWithout"])
  {
    __osWithout = [[decoder decodeObjectForKey: @"osWithout"] retain_stub];
    __osWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"model"])
  {
    __model = [[decoder decodeObjectForKey: @"model"] retain_stub];
    __model_isset = YES;
  }
  if ([decoder containsValueForKey: @"modelWithout"])
  {
    __modelWithout = [[decoder decodeObjectForKey: @"modelWithout"] retain_stub];
    __modelWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"similarApps"])
  {
    __similarApps = [[decoder decodeObjectForKey: @"similarApps"] retain_stub];
    __similarApps_isset = YES;
  }
  if ([decoder containsValueForKey: @"similarAppsWithout"])
  {
    __similarAppsWithout = [[decoder decodeObjectForKey: @"similarAppsWithout"] retain_stub];
    __similarAppsWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"changeSinceLastWeek"])
  {
    __changeSinceLastWeek = [decoder decodeDoubleForKey: @"changeSinceLastWeek"];
    __changeSinceLastWeek_isset = YES;
  }
  if ([decoder containsValueForKey: @"changeSinceLastWeekPercentage"])
  {
    __changeSinceLastWeekPercentage = [decoder decodeDoubleForKey: @"changeSinceLastWeekPercentage"];
    __changeSinceLastWeekPercentage_isset = YES;
  }
  if ([decoder containsValueForKey: @"jScoreWith"])
  {
    __jScoreWith = [[decoder decodeObjectForKey: @"jScoreWith"] retain_stub];
    __jScoreWith_isset = YES;
  }
  if ([decoder containsValueForKey: @"jScoreWithout"])
  {
    __jScoreWithout = [[decoder decodeObjectForKey: @"jScoreWithout"] retain_stub];
    __jScoreWithout_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__jScore_isset)
  {
    [encoder encodeDouble: __jScore forKey: @"jScore"];
  }
  if (__os_isset)
  {
    [encoder encodeObject: __os forKey: @"os"];
  }
  if (__osWithout_isset)
  {
    [encoder encodeObject: __osWithout forKey: @"osWithout"];
  }
  if (__model_isset)
  {
    [encoder encodeObject: __model forKey: @"model"];
  }
  if (__modelWithout_isset)
  {
    [encoder encodeObject: __modelWithout forKey: @"modelWithout"];
  }
  if (__similarApps_isset)
  {
    [encoder encodeObject: __similarApps forKey: @"similarApps"];
  }
  if (__similarAppsWithout_isset)
  {
    [encoder encodeObject: __similarAppsWithout forKey: @"similarAppsWithout"];
  }
  if (__changeSinceLastWeek_isset)
  {
    [encoder encodeDouble: __changeSinceLastWeek forKey: @"changeSinceLastWeek"];
  }
  if (__changeSinceLastWeekPercentage_isset)
  {
    [encoder encodeDouble: __changeSinceLastWeekPercentage forKey: @"changeSinceLastWeekPercentage"];
  }
  if (__jScoreWith_isset)
  {
    [encoder encodeObject: __jScoreWith forKey: @"jScoreWith"];
  }
  if (__jScoreWithout_isset)
  {
    [encoder encodeObject: __jScoreWithout forKey: @"jScoreWithout"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __jScore_isset ? 2654435761 : 0;
  if (__jScore_isset)
  {
    hash = (hash * 31) ^ [@(__jScore) hash];
  }
  hash = (hash * 31) ^ __os_isset ? 2654435761 : 0;
  if (__os_isset)
  {
    hash = (hash * 31) ^ [__os hash];
  }
  hash = (hash * 31) ^ __osWithout_isset ? 2654435761 : 0;
  if (__osWithout_isset)
  {
    hash = (hash * 31) ^ [__osWithout hash];
  }
  hash = (hash * 31) ^ __model_isset ? 2654435761 : 0;
  if (__model_isset)
  {
    hash = (hash * 31) ^ [__model hash];
  }
  hash = (hash * 31) ^ __modelWithout_isset ? 2654435761 : 0;
  if (__modelWithout_isset)
  {
    hash = (hash * 31) ^ [__modelWithout hash];
  }
  hash = (hash * 31) ^ __similarApps_isset ? 2654435761 : 0;
  if (__similarApps_isset)
  {
    hash = (hash * 31) ^ [__similarApps hash];
  }
  hash = (hash * 31) ^ __similarAppsWithout_isset ? 2654435761 : 0;
  if (__similarAppsWithout_isset)
  {
    hash = (hash * 31) ^ [__similarAppsWithout hash];
  }
  hash = (hash * 31) ^ __changeSinceLastWeek_isset ? 2654435761 : 0;
  if (__changeSinceLastWeek_isset)
  {
    hash = (hash * 31) ^ [@(__changeSinceLastWeek) hash];
  }
  hash = (hash * 31) ^ __changeSinceLastWeekPercentage_isset ? 2654435761 : 0;
  if (__changeSinceLastWeekPercentage_isset)
  {
    hash = (hash * 31) ^ [@(__changeSinceLastWeekPercentage) hash];
  }
  hash = (hash * 31) ^ __jScoreWith_isset ? 2654435761 : 0;
  if (__jScoreWith_isset)
  {
    hash = (hash * 31) ^ [__jScoreWith hash];
  }
  hash = (hash * 31) ^ __jScoreWithout_isset ? 2654435761 : 0;
  if (__jScoreWithout_isset)
  {
    hash = (hash * 31) ^ [__jScoreWithout hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Reports class]]) {
    return NO;
  }
  Reports *other = (Reports *)anObject;
  if ((__jScore_isset != other->__jScore_isset) ||
      (__jScore_isset && (__jScore != other->__jScore))) {
    return NO;
  }
  if ((__os_isset != other->__os_isset) ||
      (__os_isset && ((__os || other->__os) && ![__os isEqual:other->__os]))) {
    return NO;
  }
  if ((__osWithout_isset != other->__osWithout_isset) ||
      (__osWithout_isset && ((__osWithout || other->__osWithout) && ![__osWithout isEqual:other->__osWithout]))) {
    return NO;
  }
  if ((__model_isset != other->__model_isset) ||
      (__model_isset && ((__model || other->__model) && ![__model isEqual:other->__model]))) {
    return NO;
  }
  if ((__modelWithout_isset != other->__modelWithout_isset) ||
      (__modelWithout_isset && ((__modelWithout || other->__modelWithout) && ![__modelWithout isEqual:other->__modelWithout]))) {
    return NO;
  }
  if ((__similarApps_isset != other->__similarApps_isset) ||
      (__similarApps_isset && ((__similarApps || other->__similarApps) && ![__similarApps isEqual:other->__similarApps]))) {
    return NO;
  }
  if ((__similarAppsWithout_isset != other->__similarAppsWithout_isset) ||
      (__similarAppsWithout_isset && ((__similarAppsWithout || other->__similarAppsWithout) && ![__similarAppsWithout isEqual:other->__similarAppsWithout]))) {
    return NO;
  }
  if ((__changeSinceLastWeek_isset != other->__changeSinceLastWeek_isset) ||
      (__changeSinceLastWeek_isset && (__changeSinceLastWeek != other->__changeSinceLastWeek))) {
    return NO;
  }
  if ((__changeSinceLastWeekPercentage_isset != other->__changeSinceLastWeekPercentage_isset) ||
      (__changeSinceLastWeekPercentage_isset && (__changeSinceLastWeekPercentage != other->__changeSinceLastWeekPercentage))) {
    return NO;
  }
  if ((__jScoreWith_isset != other->__jScoreWith_isset) ||
      (__jScoreWith_isset && ((__jScoreWith || other->__jScoreWith) && ![__jScoreWith isEqual:other->__jScoreWith]))) {
    return NO;
  }
  if ((__jScoreWithout_isset != other->__jScoreWithout_isset) ||
      (__jScoreWithout_isset && ((__jScoreWithout || other->__jScoreWithout) && ![__jScoreWithout isEqual:other->__jScoreWithout]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__os release_stub];
  [__osWithout release_stub];
  [__model release_stub];
  [__modelWithout release_stub];
  [__similarApps release_stub];
  [__similarAppsWithout release_stub];
  [__jScoreWith release_stub];
  [__jScoreWithout release_stub];
  [super dealloc_stub];
}

- (double) jScore {
  return __jScore;
}

- (void) setJScore: (double) jScore {
  __jScore = jScore;
  __jScore_isset = YES;
}

- (BOOL) jScoreIsSet {
  return __jScore_isset;
}

- (void) unsetJScore {
  __jScore_isset = NO;
}

- (DetailScreenReport *) os {
  return [[__os retain_stub] autorelease_stub];
}

- (void) setOs: (DetailScreenReport *) os {
  [os retain_stub];
  [__os release_stub];
  __os = os;
  __os_isset = YES;
}

- (BOOL) osIsSet {
  return __os_isset;
}

- (void) unsetOs {
  [__os release_stub];
  __os = nil;
  __os_isset = NO;
}

- (DetailScreenReport *) osWithout {
  return [[__osWithout retain_stub] autorelease_stub];
}

- (void) setOsWithout: (DetailScreenReport *) osWithout {
  [osWithout retain_stub];
  [__osWithout release_stub];
  __osWithout = osWithout;
  __osWithout_isset = YES;
}

- (BOOL) osWithoutIsSet {
  return __osWithout_isset;
}

- (void) unsetOsWithout {
  [__osWithout release_stub];
  __osWithout = nil;
  __osWithout_isset = NO;
}

- (DetailScreenReport *) model {
  return [[__model retain_stub] autorelease_stub];
}

- (void) setModel: (DetailScreenReport *) model {
  [model retain_stub];
  [__model release_stub];
  __model = model;
  __model_isset = YES;
}

- (BOOL) modelIsSet {
  return __model_isset;
}

- (void) unsetModel {
  [__model release_stub];
  __model = nil;
  __model_isset = NO;
}

- (DetailScreenReport *) modelWithout {
  return [[__modelWithout retain_stub] autorelease_stub];
}

- (void) setModelWithout: (DetailScreenReport *) modelWithout {
  [modelWithout retain_stub];
  [__modelWithout release_stub];
  __modelWithout = modelWithout;
  __modelWithout_isset = YES;
}

- (BOOL) modelWithoutIsSet {
  return __modelWithout_isset;
}

- (void) unsetModelWithout {
  [__modelWithout release_stub];
  __modelWithout = nil;
  __modelWithout_isset = NO;
}

- (DetailScreenReport *) similarApps {
  return [[__similarApps retain_stub] autorelease_stub];
}

- (void) setSimilarApps: (DetailScreenReport *) similarApps {
  [similarApps retain_stub];
  [__similarApps release_stub];
  __similarApps = similarApps;
  __similarApps_isset = YES;
}

- (BOOL) similarAppsIsSet {
  return __similarApps_isset;
}

- (void) unsetSimilarApps {
  [__similarApps release_stub];
  __similarApps = nil;
  __similarApps_isset = NO;
}

- (DetailScreenReport *) similarAppsWithout {
  return [[__similarAppsWithout retain_stub] autorelease_stub];
}

- (void) setSimilarAppsWithout: (DetailScreenReport *) similarAppsWithout {
  [similarAppsWithout retain_stub];
  [__similarAppsWithout release_stub];
  __similarAppsWithout = similarAppsWithout;
  __similarAppsWithout_isset = YES;
}

- (BOOL) similarAppsWithoutIsSet {
  return __similarAppsWithout_isset;
}

- (void) unsetSimilarAppsWithout {
  [__similarAppsWithout release_stub];
  __similarAppsWithout = nil;
  __similarAppsWithout_isset = NO;
}

- (double) changeSinceLastWeek {
  return __changeSinceLastWeek;
}

- (void) setChangeSinceLastWeek: (double) changeSinceLastWeek {
  __changeSinceLastWeek = changeSinceLastWeek;
  __changeSinceLastWeek_isset = YES;
}

- (BOOL) changeSinceLastWeekIsSet {
  return __changeSinceLastWeek_isset;
}

- (void) unsetChangeSinceLastWeek {
  __changeSinceLastWeek_isset = NO;
}

- (double) changeSinceLastWeekPercentage {
  return __changeSinceLastWeekPercentage;
}

- (void) setChangeSinceLastWeekPercentage: (double) changeSinceLastWeekPercentage {
  __changeSinceLastWeekPercentage = changeSinceLastWeekPercentage;
  __changeSinceLastWeekPercentage_isset = YES;
}

- (BOOL) changeSinceLastWeekPercentageIsSet {
  return __changeSinceLastWeekPercentage_isset;
}

- (void) unsetChangeSinceLastWeekPercentage {
  __changeSinceLastWeekPercentage_isset = NO;
}

- (DetailScreenReport *) jScoreWith {
  return [[__jScoreWith retain_stub] autorelease_stub];
}

- (void) setJScoreWith: (DetailScreenReport *) jScoreWith {
  [jScoreWith retain_stub];
  [__jScoreWith release_stub];
  __jScoreWith = jScoreWith;
  __jScoreWith_isset = YES;
}

- (BOOL) jScoreWithIsSet {
  return __jScoreWith_isset;
}

- (void) unsetJScoreWith {
  [__jScoreWith release_stub];
  __jScoreWith = nil;
  __jScoreWith_isset = NO;
}

- (DetailScreenReport *) jScoreWithout {
  return [[__jScoreWithout retain_stub] autorelease_stub];
}

- (void) setJScoreWithout: (DetailScreenReport *) jScoreWithout {
  [jScoreWithout retain_stub];
  [__jScoreWithout release_stub];
  __jScoreWithout = jScoreWithout;
  __jScoreWithout_isset = YES;
}

- (BOOL) jScoreWithoutIsSet {
  return __jScoreWithout_isset;
}

- (void) unsetJScoreWithout {
  [__jScoreWithout release_stub];
  __jScoreWithout = nil;
  __jScoreWithout_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setJScore: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setOs: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setOsWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setModel: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setModelWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSimilarApps: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSimilarAppsWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setChangeSinceLastWeek: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setChangeSinceLastWeekPercentage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setJScoreWith: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRUCT) {
          DetailScreenReport *fieldValue = [[DetailScreenReport alloc] init];
          [fieldValue read: inProtocol];
          [self setJScoreWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Reports"];
  if (__jScore_isset) {
    [outProtocol writeFieldBeginWithName: @"jScore" type: TType_DOUBLE fieldID: 1];
    [outProtocol writeDouble: __jScore];
    [outProtocol writeFieldEnd];
  }
  if (__os_isset) {
    if (__os != nil) {
      [outProtocol writeFieldBeginWithName: @"os" type: TType_STRUCT fieldID: 2];
      [__os write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__osWithout_isset) {
    if (__osWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"osWithout" type: TType_STRUCT fieldID: 3];
      [__osWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__model_isset) {
    if (__model != nil) {
      [outProtocol writeFieldBeginWithName: @"model" type: TType_STRUCT fieldID: 4];
      [__model write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__modelWithout_isset) {
    if (__modelWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"modelWithout" type: TType_STRUCT fieldID: 5];
      [__modelWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__similarApps_isset) {
    if (__similarApps != nil) {
      [outProtocol writeFieldBeginWithName: @"similarApps" type: TType_STRUCT fieldID: 6];
      [__similarApps write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__similarAppsWithout_isset) {
    if (__similarAppsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"similarAppsWithout" type: TType_STRUCT fieldID: 7];
      [__similarAppsWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__changeSinceLastWeek_isset) {
    [outProtocol writeFieldBeginWithName: @"changeSinceLastWeek" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __changeSinceLastWeek];
    [outProtocol writeFieldEnd];
  }
  if (__changeSinceLastWeekPercentage_isset) {
    [outProtocol writeFieldBeginWithName: @"changeSinceLastWeekPercentage" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __changeSinceLastWeekPercentage];
    [outProtocol writeFieldEnd];
  }
  if (__jScoreWith_isset) {
    if (__jScoreWith != nil) {
      [outProtocol writeFieldBeginWithName: @"jScoreWith" type: TType_STRUCT fieldID: 10];
      [__jScoreWith write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__jScoreWithout_isset) {
    if (__jScoreWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"jScoreWithout" type: TType_STRUCT fieldID: 11];
      [__jScoreWithout write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Reports("];
  [ms appendString: @"jScore:"];
  [ms appendFormat: @"%f", __jScore];
  [ms appendString: @",os:"];
  [ms appendFormat: @"%@", __os];
  [ms appendString: @",osWithout:"];
  [ms appendFormat: @"%@", __osWithout];
  [ms appendString: @",model:"];
  [ms appendFormat: @"%@", __model];
  [ms appendString: @",modelWithout:"];
  [ms appendFormat: @"%@", __modelWithout];
  [ms appendString: @",similarApps:"];
  [ms appendFormat: @"%@", __similarApps];
  [ms appendString: @",similarAppsWithout:"];
  [ms appendFormat: @"%@", __similarAppsWithout];
  [ms appendString: @",changeSinceLastWeek:"];
  [ms appendFormat: @"%f", __changeSinceLastWeek];
  [ms appendString: @",changeSinceLastWeekPercentage:"];
  [ms appendFormat: @"%f", __changeSinceLastWeekPercentage];
  [ms appendString: @",jScoreWith:"];
  [ms appendFormat: @"%@", __jScoreWith];
  [ms appendString: @",jScoreWithout:"];
  [ms appendFormat: @"%@", __jScoreWithout];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HogsBugs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppName: (NSString *) appName wDistance: (double) wDistance xVals: (NSMutableArray *) xVals yVals: (NSMutableArray *) yVals xValsWithout: (NSMutableArray *) xValsWithout yValsWithout: (NSMutableArray *) yValsWithout expectedValue: (double) expectedValue expectedValueWithout: (double) expectedValueWithout error: (double) error errorWithout: (double) errorWithout samples: (double) samples samplesWithout: (double) samplesWithout appLabel: (NSString *) appLabel appPriority: (NSString *) appPriority
{
  self = [super init];
  __appName = [appName retain_stub];
  __appName_isset = YES;
  __wDistance = wDistance;
  __wDistance_isset = YES;
  __xVals = [xVals retain_stub];
  __xVals_isset = YES;
  __yVals = [yVals retain_stub];
  __yVals_isset = YES;
  __xValsWithout = [xValsWithout retain_stub];
  __xValsWithout_isset = YES;
  __yValsWithout = [yValsWithout retain_stub];
  __yValsWithout_isset = YES;
  __expectedValue = expectedValue;
  __expectedValue_isset = YES;
  __expectedValueWithout = expectedValueWithout;
  __expectedValueWithout_isset = YES;
  __error = error;
  __error_isset = YES;
  __errorWithout = errorWithout;
  __errorWithout_isset = YES;
  __samples = samples;
  __samples_isset = YES;
  __samplesWithout = samplesWithout;
  __samplesWithout_isset = YES;
  __appLabel = [appLabel retain_stub];
  __appLabel_isset = YES;
  __appPriority = [appPriority retain_stub];
  __appPriority_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"appName"])
  {
    __appName = [[decoder decodeObjectForKey: @"appName"] retain_stub];
    __appName_isset = YES;
  }
  if ([decoder containsValueForKey: @"wDistance"])
  {
    __wDistance = [decoder decodeDoubleForKey: @"wDistance"];
    __wDistance_isset = YES;
  }
  if ([decoder containsValueForKey: @"xVals"])
  {
    __xVals = [[decoder decodeObjectForKey: @"xVals"] retain_stub];
    __xVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"yVals"])
  {
    __yVals = [[decoder decodeObjectForKey: @"yVals"] retain_stub];
    __yVals_isset = YES;
  }
  if ([decoder containsValueForKey: @"xValsWithout"])
  {
    __xValsWithout = [[decoder decodeObjectForKey: @"xValsWithout"] retain_stub];
    __xValsWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"yValsWithout"])
  {
    __yValsWithout = [[decoder decodeObjectForKey: @"yValsWithout"] retain_stub];
    __yValsWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"expectedValue"])
  {
    __expectedValue = [decoder decodeDoubleForKey: @"expectedValue"];
    __expectedValue_isset = YES;
  }
  if ([decoder containsValueForKey: @"expectedValueWithout"])
  {
    __expectedValueWithout = [decoder decodeDoubleForKey: @"expectedValueWithout"];
    __expectedValueWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"error"])
  {
    __error = [decoder decodeDoubleForKey: @"error"];
    __error_isset = YES;
  }
  if ([decoder containsValueForKey: @"errorWithout"])
  {
    __errorWithout = [decoder decodeDoubleForKey: @"errorWithout"];
    __errorWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"samples"])
  {
    __samples = [decoder decodeDoubleForKey: @"samples"];
    __samples_isset = YES;
  }
  if ([decoder containsValueForKey: @"samplesWithout"])
  {
    __samplesWithout = [decoder decodeDoubleForKey: @"samplesWithout"];
    __samplesWithout_isset = YES;
  }
  if ([decoder containsValueForKey: @"appLabel"])
  {
    __appLabel = [[decoder decodeObjectForKey: @"appLabel"] retain_stub];
    __appLabel_isset = YES;
  }
  if ([decoder containsValueForKey: @"appPriority"])
  {
    __appPriority = [[decoder decodeObjectForKey: @"appPriority"] retain_stub];
    __appPriority_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__appName_isset)
  {
    [encoder encodeObject: __appName forKey: @"appName"];
  }
  if (__wDistance_isset)
  {
    [encoder encodeDouble: __wDistance forKey: @"wDistance"];
  }
  if (__xVals_isset)
  {
    [encoder encodeObject: __xVals forKey: @"xVals"];
  }
  if (__yVals_isset)
  {
    [encoder encodeObject: __yVals forKey: @"yVals"];
  }
  if (__xValsWithout_isset)
  {
    [encoder encodeObject: __xValsWithout forKey: @"xValsWithout"];
  }
  if (__yValsWithout_isset)
  {
    [encoder encodeObject: __yValsWithout forKey: @"yValsWithout"];
  }
  if (__expectedValue_isset)
  {
    [encoder encodeDouble: __expectedValue forKey: @"expectedValue"];
  }
  if (__expectedValueWithout_isset)
  {
    [encoder encodeDouble: __expectedValueWithout forKey: @"expectedValueWithout"];
  }
  if (__error_isset)
  {
    [encoder encodeDouble: __error forKey: @"error"];
  }
  if (__errorWithout_isset)
  {
    [encoder encodeDouble: __errorWithout forKey: @"errorWithout"];
  }
  if (__samples_isset)
  {
    [encoder encodeDouble: __samples forKey: @"samples"];
  }
  if (__samplesWithout_isset)
  {
    [encoder encodeDouble: __samplesWithout forKey: @"samplesWithout"];
  }
  if (__appLabel_isset)
  {
    [encoder encodeObject: __appLabel forKey: @"appLabel"];
  }
  if (__appPriority_isset)
  {
    [encoder encodeObject: __appPriority forKey: @"appPriority"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __appName_isset ? 2654435761 : 0;
  if (__appName_isset)
  {
    hash = (hash * 31) ^ [__appName hash];
  }
  hash = (hash * 31) ^ __wDistance_isset ? 2654435761 : 0;
  if (__wDistance_isset)
  {
    hash = (hash * 31) ^ [@(__wDistance) hash];
  }
  hash = (hash * 31) ^ __xVals_isset ? 2654435761 : 0;
  if (__xVals_isset)
  {
    hash = (hash * 31) ^ [__xVals hash];
  }
  hash = (hash * 31) ^ __yVals_isset ? 2654435761 : 0;
  if (__yVals_isset)
  {
    hash = (hash * 31) ^ [__yVals hash];
  }
  hash = (hash * 31) ^ __xValsWithout_isset ? 2654435761 : 0;
  if (__xValsWithout_isset)
  {
    hash = (hash * 31) ^ [__xValsWithout hash];
  }
  hash = (hash * 31) ^ __yValsWithout_isset ? 2654435761 : 0;
  if (__yValsWithout_isset)
  {
    hash = (hash * 31) ^ [__yValsWithout hash];
  }
  hash = (hash * 31) ^ __expectedValue_isset ? 2654435761 : 0;
  if (__expectedValue_isset)
  {
    hash = (hash * 31) ^ [@(__expectedValue) hash];
  }
  hash = (hash * 31) ^ __expectedValueWithout_isset ? 2654435761 : 0;
  if (__expectedValueWithout_isset)
  {
    hash = (hash * 31) ^ [@(__expectedValueWithout) hash];
  }
  hash = (hash * 31) ^ __error_isset ? 2654435761 : 0;
  if (__error_isset)
  {
    hash = (hash * 31) ^ [@(__error) hash];
  }
  hash = (hash * 31) ^ __errorWithout_isset ? 2654435761 : 0;
  if (__errorWithout_isset)
  {
    hash = (hash * 31) ^ [@(__errorWithout) hash];
  }
  hash = (hash * 31) ^ __samples_isset ? 2654435761 : 0;
  if (__samples_isset)
  {
    hash = (hash * 31) ^ [@(__samples) hash];
  }
  hash = (hash * 31) ^ __samplesWithout_isset ? 2654435761 : 0;
  if (__samplesWithout_isset)
  {
    hash = (hash * 31) ^ [@(__samplesWithout) hash];
  }
  hash = (hash * 31) ^ __appLabel_isset ? 2654435761 : 0;
  if (__appLabel_isset)
  {
    hash = (hash * 31) ^ [__appLabel hash];
  }
  hash = (hash * 31) ^ __appPriority_isset ? 2654435761 : 0;
  if (__appPriority_isset)
  {
    hash = (hash * 31) ^ [__appPriority hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[HogsBugs class]]) {
    return NO;
  }
  HogsBugs *other = (HogsBugs *)anObject;
  if ((__appName_isset != other->__appName_isset) ||
      (__appName_isset && ((__appName || other->__appName) && ![__appName isEqual:other->__appName]))) {
    return NO;
  }
  if ((__wDistance_isset != other->__wDistance_isset) ||
      (__wDistance_isset && (__wDistance != other->__wDistance))) {
    return NO;
  }
  if ((__xVals_isset != other->__xVals_isset) ||
      (__xVals_isset && ((__xVals || other->__xVals) && ![__xVals isEqual:other->__xVals]))) {
    return NO;
  }
  if ((__yVals_isset != other->__yVals_isset) ||
      (__yVals_isset && ((__yVals || other->__yVals) && ![__yVals isEqual:other->__yVals]))) {
    return NO;
  }
  if ((__xValsWithout_isset != other->__xValsWithout_isset) ||
      (__xValsWithout_isset && ((__xValsWithout || other->__xValsWithout) && ![__xValsWithout isEqual:other->__xValsWithout]))) {
    return NO;
  }
  if ((__yValsWithout_isset != other->__yValsWithout_isset) ||
      (__yValsWithout_isset && ((__yValsWithout || other->__yValsWithout) && ![__yValsWithout isEqual:other->__yValsWithout]))) {
    return NO;
  }
  if ((__expectedValue_isset != other->__expectedValue_isset) ||
      (__expectedValue_isset && (__expectedValue != other->__expectedValue))) {
    return NO;
  }
  if ((__expectedValueWithout_isset != other->__expectedValueWithout_isset) ||
      (__expectedValueWithout_isset && (__expectedValueWithout != other->__expectedValueWithout))) {
    return NO;
  }
  if ((__error_isset != other->__error_isset) ||
      (__error_isset && (__error != other->__error))) {
    return NO;
  }
  if ((__errorWithout_isset != other->__errorWithout_isset) ||
      (__errorWithout_isset && (__errorWithout != other->__errorWithout))) {
    return NO;
  }
  if ((__samples_isset != other->__samples_isset) ||
      (__samples_isset && (__samples != other->__samples))) {
    return NO;
  }
  if ((__samplesWithout_isset != other->__samplesWithout_isset) ||
      (__samplesWithout_isset && (__samplesWithout != other->__samplesWithout))) {
    return NO;
  }
  if ((__appLabel_isset != other->__appLabel_isset) ||
      (__appLabel_isset && ((__appLabel || other->__appLabel) && ![__appLabel isEqual:other->__appLabel]))) {
    return NO;
  }
  if ((__appPriority_isset != other->__appPriority_isset) ||
      (__appPriority_isset && ((__appPriority || other->__appPriority) && ![__appPriority isEqual:other->__appPriority]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__appName release_stub];
  [__xVals release_stub];
  [__yVals release_stub];
  [__xValsWithout release_stub];
  [__yValsWithout release_stub];
  [__appLabel release_stub];
  [__appPriority release_stub];
  [super dealloc_stub];
}

- (NSString *) appName {
  return [[__appName retain_stub] autorelease_stub];
}

- (void) setAppName: (NSString *) appName {
  [appName retain_stub];
  [__appName release_stub];
  __appName = appName;
  __appName_isset = YES;
}

- (BOOL) appNameIsSet {
  return __appName_isset;
}

- (void) unsetAppName {
  [__appName release_stub];
  __appName = nil;
  __appName_isset = NO;
}

- (double) wDistance {
  return __wDistance;
}

- (void) setWDistance: (double) wDistance {
  __wDistance = wDistance;
  __wDistance_isset = YES;
}

- (BOOL) wDistanceIsSet {
  return __wDistance_isset;
}

- (void) unsetWDistance {
  __wDistance_isset = NO;
}

- (NSMutableArray *) xVals {
  return [[__xVals retain_stub] autorelease_stub];
}

- (void) setXVals: (NSMutableArray *) xVals {
  [xVals retain_stub];
  [__xVals release_stub];
  __xVals = xVals;
  __xVals_isset = YES;
}

- (BOOL) xValsIsSet {
  return __xVals_isset;
}

- (void) unsetXVals {
  [__xVals release_stub];
  __xVals = nil;
  __xVals_isset = NO;
}

- (NSMutableArray *) yVals {
  return [[__yVals retain_stub] autorelease_stub];
}

- (void) setYVals: (NSMutableArray *) yVals {
  [yVals retain_stub];
  [__yVals release_stub];
  __yVals = yVals;
  __yVals_isset = YES;
}

- (BOOL) yValsIsSet {
  return __yVals_isset;
}

- (void) unsetYVals {
  [__yVals release_stub];
  __yVals = nil;
  __yVals_isset = NO;
}

- (NSMutableArray *) xValsWithout {
  return [[__xValsWithout retain_stub] autorelease_stub];
}

- (void) setXValsWithout: (NSMutableArray *) xValsWithout {
  [xValsWithout retain_stub];
  [__xValsWithout release_stub];
  __xValsWithout = xValsWithout;
  __xValsWithout_isset = YES;
}

- (BOOL) xValsWithoutIsSet {
  return __xValsWithout_isset;
}

- (void) unsetXValsWithout {
  [__xValsWithout release_stub];
  __xValsWithout = nil;
  __xValsWithout_isset = NO;
}

- (NSMutableArray *) yValsWithout {
  return [[__yValsWithout retain_stub] autorelease_stub];
}

- (void) setYValsWithout: (NSMutableArray *) yValsWithout {
  [yValsWithout retain_stub];
  [__yValsWithout release_stub];
  __yValsWithout = yValsWithout;
  __yValsWithout_isset = YES;
}

- (BOOL) yValsWithoutIsSet {
  return __yValsWithout_isset;
}

- (void) unsetYValsWithout {
  [__yValsWithout release_stub];
  __yValsWithout = nil;
  __yValsWithout_isset = NO;
}

- (double) expectedValue {
  return __expectedValue;
}

- (void) setExpectedValue: (double) expectedValue {
  __expectedValue = expectedValue;
  __expectedValue_isset = YES;
}

- (BOOL) expectedValueIsSet {
  return __expectedValue_isset;
}

- (void) unsetExpectedValue {
  __expectedValue_isset = NO;
}

- (double) expectedValueWithout {
  return __expectedValueWithout;
}

- (void) setExpectedValueWithout: (double) expectedValueWithout {
  __expectedValueWithout = expectedValueWithout;
  __expectedValueWithout_isset = YES;
}

- (BOOL) expectedValueWithoutIsSet {
  return __expectedValueWithout_isset;
}

- (void) unsetExpectedValueWithout {
  __expectedValueWithout_isset = NO;
}

- (double) error {
  return __error;
}

- (void) setError: (double) error {
  __error = error;
  __error_isset = YES;
}

- (BOOL) errorIsSet {
  return __error_isset;
}

- (void) unsetError {
  __error_isset = NO;
}

- (double) errorWithout {
  return __errorWithout;
}

- (void) setErrorWithout: (double) errorWithout {
  __errorWithout = errorWithout;
  __errorWithout_isset = YES;
}

- (BOOL) errorWithoutIsSet {
  return __errorWithout_isset;
}

- (void) unsetErrorWithout {
  __errorWithout_isset = NO;
}

- (double) samples {
  return __samples;
}

- (void) setSamples: (double) samples {
  __samples = samples;
  __samples_isset = YES;
}

- (BOOL) samplesIsSet {
  return __samples_isset;
}

- (void) unsetSamples {
  __samples_isset = NO;
}

- (double) samplesWithout {
  return __samplesWithout;
}

- (void) setSamplesWithout: (double) samplesWithout {
  __samplesWithout = samplesWithout;
  __samplesWithout_isset = YES;
}

- (BOOL) samplesWithoutIsSet {
  return __samplesWithout_isset;
}

- (void) unsetSamplesWithout {
  __samplesWithout_isset = NO;
}

- (NSString *) appLabel {
  return [[__appLabel retain_stub] autorelease_stub];
}

- (void) setAppLabel: (NSString *) appLabel {
  [appLabel retain_stub];
  [__appLabel release_stub];
  __appLabel = appLabel;
  __appLabel_isset = YES;
}

- (BOOL) appLabelIsSet {
  return __appLabel_isset;
}

- (void) unsetAppLabel {
  [__appLabel release_stub];
  __appLabel = nil;
  __appLabel_isset = NO;
}

- (NSString *) appPriority {
  return [[__appPriority retain_stub] autorelease_stub];
}

- (void) setAppPriority: (NSString *) appPriority {
  [appPriority retain_stub];
  [__appPriority release_stub];
  __appPriority = appPriority;
  __appPriority_isset = YES;
}

- (BOOL) appPriorityIsSet {
  return __appPriority_isset;
}

- (void) unsetAppPriority {
  [__appPriority release_stub];
  __appPriority = nil;
  __appPriority_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setWDistance: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            double _elem32 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem32]];
          }
          [inProtocol readListEnd];
          [self setXVals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size33;
          [inProtocol readListBeginReturningElementType: NULL size: &_size33];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size33];
          int _i34;
          for (_i34 = 0; _i34 < _size33; ++_i34)
          {
            double _elem35 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem35]];
          }
          [inProtocol readListEnd];
          [self setYVals: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size36;
          [inProtocol readListBeginReturningElementType: NULL size: &_size36];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size36];
          int _i37;
          for (_i37 = 0; _i37 < _size36; ++_i37)
          {
            double _elem38 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem38]];
          }
          [inProtocol readListEnd];
          [self setXValsWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_LIST) {
          int _size39;
          [inProtocol readListBeginReturningElementType: NULL size: &_size39];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size39];
          int _i40;
          for (_i40 = 0; _i40 < _size39; ++_i40)
          {
            double _elem41 = [inProtocol readDouble];
            [fieldValue addObject: [NSNumber numberWithDouble: _elem41]];
          }
          [inProtocol readListEnd];
          [self setYValsWithout: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setExpectedValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setExpectedValueWithout: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setError: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setErrorWithout: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSamples: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setSamplesWithout: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppLabel: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppPriority: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HogsBugs"];
  if (__appName_isset) {
    if (__appName != nil) {
      [outProtocol writeFieldBeginWithName: @"appName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __appName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__wDistance_isset) {
    [outProtocol writeFieldBeginWithName: @"wDistance" type: TType_DOUBLE fieldID: 2];
    [outProtocol writeDouble: __wDistance];
    [outProtocol writeFieldEnd];
  }
  if (__xVals_isset) {
    if (__xVals != nil) {
      [outProtocol writeFieldBeginWithName: @"xVals" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xVals count]];
        int idx43;
        for (idx43 = 0; idx43 < [__xVals count]; idx43++)
        {
          [outProtocol writeDouble: [[__xVals objectAtIndex: idx43] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yVals_isset) {
    if (__yVals != nil) {
      [outProtocol writeFieldBeginWithName: @"yVals" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yVals count]];
        int idx45;
        for (idx45 = 0; idx45 < [__yVals count]; idx45++)
        {
          [outProtocol writeDouble: [[__yVals objectAtIndex: idx45] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__xValsWithout_isset) {
    if (__xValsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"xValsWithout" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__xValsWithout count]];
        int idx47;
        for (idx47 = 0; idx47 < [__xValsWithout count]; idx47++)
        {
          [outProtocol writeDouble: [[__xValsWithout objectAtIndex: idx47] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__yValsWithout_isset) {
    if (__yValsWithout != nil) {
      [outProtocol writeFieldBeginWithName: @"yValsWithout" type: TType_LIST fieldID: 6];
      {
        [outProtocol writeListBeginWithElementType: TType_DOUBLE size: [__yValsWithout count]];
        int idx49;
        for (idx49 = 0; idx49 < [__yValsWithout count]; idx49++)
        {
          [outProtocol writeDouble: [[__yValsWithout objectAtIndex: idx49] doubleValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__expectedValue_isset) {
    [outProtocol writeFieldBeginWithName: @"expectedValue" type: TType_DOUBLE fieldID: 7];
    [outProtocol writeDouble: __expectedValue];
    [outProtocol writeFieldEnd];
  }
  if (__expectedValueWithout_isset) {
    [outProtocol writeFieldBeginWithName: @"expectedValueWithout" type: TType_DOUBLE fieldID: 8];
    [outProtocol writeDouble: __expectedValueWithout];
    [outProtocol writeFieldEnd];
  }
  if (__error_isset) {
    [outProtocol writeFieldBeginWithName: @"error" type: TType_DOUBLE fieldID: 9];
    [outProtocol writeDouble: __error];
    [outProtocol writeFieldEnd];
  }
  if (__errorWithout_isset) {
    [outProtocol writeFieldBeginWithName: @"errorWithout" type: TType_DOUBLE fieldID: 10];
    [outProtocol writeDouble: __errorWithout];
    [outProtocol writeFieldEnd];
  }
  if (__samples_isset) {
    [outProtocol writeFieldBeginWithName: @"samples" type: TType_DOUBLE fieldID: 11];
    [outProtocol writeDouble: __samples];
    [outProtocol writeFieldEnd];
  }
  if (__samplesWithout_isset) {
    [outProtocol writeFieldBeginWithName: @"samplesWithout" type: TType_DOUBLE fieldID: 12];
    [outProtocol writeDouble: __samplesWithout];
    [outProtocol writeFieldEnd];
  }
  if (__appLabel_isset) {
    if (__appLabel != nil) {
      [outProtocol writeFieldBeginWithName: @"appLabel" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __appLabel];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appPriority_isset) {
    if (__appPriority != nil) {
      [outProtocol writeFieldBeginWithName: @"appPriority" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __appPriority];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HogsBugs("];
  [ms appendString: @"appName:"];
  [ms appendFormat: @"\"%@\"", __appName];
  [ms appendString: @",wDistance:"];
  [ms appendFormat: @"%f", __wDistance];
  [ms appendString: @",xVals:"];
  [ms appendFormat: @"%@", __xVals];
  [ms appendString: @",yVals:"];
  [ms appendFormat: @"%@", __yVals];
  [ms appendString: @",xValsWithout:"];
  [ms appendFormat: @"%@", __xValsWithout];
  [ms appendString: @",yValsWithout:"];
  [ms appendFormat: @"%@", __yValsWithout];
  [ms appendString: @",expectedValue:"];
  [ms appendFormat: @"%f", __expectedValue];
  [ms appendString: @",expectedValueWithout:"];
  [ms appendFormat: @"%f", __expectedValueWithout];
  [ms appendString: @",error:"];
  [ms appendFormat: @"%f", __error];
  [ms appendString: @",errorWithout:"];
  [ms appendFormat: @"%f", __errorWithout];
  [ms appendString: @",samples:"];
  [ms appendFormat: @"%f", __samples];
  [ms appendString: @",samplesWithout:"];
  [ms appendFormat: @"%f", __samplesWithout];
  [ms appendString: @",appLabel:"];
  [ms appendFormat: @"\"%@\"", __appLabel];
  [ms appendString: @",appPriority:"];
  [ms appendFormat: @"\"%@\"", __appPriority];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation HogBugReport

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUuId: (NSString *) uuId hbList: (HogsBugsList) hbList
{
  self = [super init];
  __uuId = [uuId retain_stub];
  __uuId_isset = YES;
  __hbList = [hbList retain_stub];
  __hbList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain_stub];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"hbList"])
  {
    __hbList = [[decoder decodeObjectForKey: @"hbList"] retain_stub];
    __hbList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__hbList_isset)
  {
    [encoder encodeObject: __hbList forKey: @"hbList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uuId_isset ? 2654435761 : 0;
  if (__uuId_isset)
  {
    hash = (hash * 31) ^ [__uuId hash];
  }
  hash = (hash * 31) ^ __hbList_isset ? 2654435761 : 0;
  if (__hbList_isset)
  {
    hash = (hash * 31) ^ [__hbList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[HogBugReport class]]) {
    return NO;
  }
  HogBugReport *other = (HogBugReport *)anObject;
  if ((__uuId_isset != other->__uuId_isset) ||
      (__uuId_isset && ((__uuId || other->__uuId) && ![__uuId isEqual:other->__uuId]))) {
    return NO;
  }
  if ((__hbList_isset != other->__hbList_isset) ||
      (__hbList_isset && ((__hbList || other->__hbList) && ![__hbList isEqual:other->__hbList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uuId release_stub];
  [__hbList release_stub];
  [super dealloc_stub];
}

- (NSString *) uuId {
  return [[__uuId retain_stub] autorelease_stub];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain_stub];
  [__uuId release_stub];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release_stub];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSMutableArray *) hbList {
  return [[__hbList retain_stub] autorelease_stub];
}

- (void) setHbList: (NSMutableArray *) hbList {
  [hbList retain_stub];
  [__hbList release_stub];
  __hbList = hbList;
  __hbList_isset = YES;
}

- (BOOL) hbListIsSet {
  return __hbList_isset;
}

- (void) unsetHbList {
  [__hbList release_stub];
  __hbList = nil;
  __hbList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size50;
          [inProtocol readListBeginReturningElementType: NULL size: &_size50];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size50];
          int _i51;
          for (_i51 = 0; _i51 < _size50; ++_i51)
          {
            HogsBugs *_elem52 = [[HogsBugs alloc] init];
            [_elem52 read: inProtocol];
            [fieldValue addObject: _elem52];
            [_elem52 release_stub];
          }
          [inProtocol readListEnd];
          [self setHbList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HogBugReport"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__hbList_isset) {
    if (__hbList != nil) {
      [outProtocol writeFieldBeginWithName: @"hbList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__hbList count]];
        int idx54;
        for (idx54 = 0; idx54 < [__hbList count]; idx54++)
        {
          [[__hbList objectAtIndex: idx54] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__uuId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uuId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HogBugReport("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",hbList:"];
  [ms appendFormat: @"%@", __hbList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation CaratProtocolConstants
+ (void) initialize {
}
@end

@interface registerMe_args : NSObject <TBase, NSCoding> {
  Registration * __registration;

  BOOL __registration_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
#endif

- (id) init;
- (id) initWithRegistration: (Registration *) registration;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
#endif
- (BOOL) registrationIsSet;

@end

@implementation registerMe_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegistration: (Registration *) registration
{
  self = [super init];
  __registration = [registration retain_stub];
  __registration_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registration"])
  {
    __registration = [[decoder decodeObjectForKey: @"registration"] retain_stub];
    __registration_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registration_isset)
  {
    [encoder encodeObject: __registration forKey: @"registration"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __registration_isset ? 2654435761 : 0;
  if (__registration_isset)
  {
    hash = (hash * 31) ^ [__registration hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[registerMe_args class]]) {
    return NO;
  }
  registerMe_args *other = (registerMe_args *)anObject;
  if ((__registration_isset != other->__registration_isset) ||
      (__registration_isset && ((__registration || other->__registration) && ![__registration isEqual:other->__registration]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__registration release_stub];
  [super dealloc_stub];
}

- (Registration *) registration {
  return [[__registration retain_stub] autorelease_stub];
}

- (void) setRegistration: (Registration *) registration {
  [registration retain_stub];
  [__registration release_stub];
  __registration = registration;
  __registration_isset = YES;
}

- (BOOL) registrationIsSet {
  return __registration_isset;
}

- (void) unsetRegistration {
  [__registration release_stub];
  __registration = nil;
  __registration_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Registration *fieldValue = [[Registration alloc] init];
          [fieldValue read: inProtocol];
          [self setRegistration: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (__registration_isset) {
    if (__registration != nil) {
      [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
      [__registration write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"registerMe_args("];
  [ms appendString: @"registration:"];
  [ms appendFormat: @"%@", __registration];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uploadSample_args : NSObject <TBase, NSCoding> {
  Sample * __sample;

  BOOL __sample_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=sample, setter=setSample:) Sample * sample;
#endif

- (id) init;
- (id) initWithSample: (Sample *) sample;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Sample *) sample;
- (void) setSample: (Sample *) sample;
#endif
- (BOOL) sampleIsSet;

@end

@implementation uploadSample_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSample: (Sample *) sample
{
  self = [super init];
  __sample = [sample retain_stub];
  __sample_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sample"])
  {
    __sample = [[decoder decodeObjectForKey: @"sample"] retain_stub];
    __sample_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sample_isset)
  {
    [encoder encodeObject: __sample forKey: @"sample"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __sample_isset ? 2654435761 : 0;
  if (__sample_isset)
  {
    hash = (hash * 31) ^ [__sample hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[uploadSample_args class]]) {
    return NO;
  }
  uploadSample_args *other = (uploadSample_args *)anObject;
  if ((__sample_isset != other->__sample_isset) ||
      (__sample_isset && ((__sample || other->__sample) && ![__sample isEqual:other->__sample]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__sample release_stub];
  [super dealloc_stub];
}

- (Sample *) sample {
  return [[__sample retain_stub] autorelease_stub];
}

- (void) setSample: (Sample *) sample {
  [sample retain_stub];
  [__sample release_stub];
  __sample = sample;
  __sample_isset = YES;
}

- (BOOL) sampleIsSet {
  return __sample_isset;
}

- (void) unsetSample {
  [__sample release_stub];
  __sample = nil;
  __sample_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Sample *fieldValue = [[Sample alloc] init];
          [fieldValue read: inProtocol];
          [self setSample: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (__sample_isset) {
    if (__sample != nil) {
      [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
      [__sample write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uploadSample_args("];
  [ms appendString: @"sample:"];
  [ms appendFormat: @"%@", __sample];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UploadSample_result : NSObject <TBase, NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UploadSample_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [@(__success) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UploadSample_result class]]) {
    return NO;
  }
  UploadSample_result *other = (UploadSample_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && (__success != other->__success))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadSample_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadSample_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getReports_args : NSObject <TBase, NSCoding> {
  NSString * __uuId;
  FeatureList __features;

  BOOL __uuId_isset;
  BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) init;
- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
#endif
- (BOOL) uuIdIsSet;

#if !__has_feature(objc_arc)
- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
#endif
- (BOOL) featuresIsSet;

@end

@implementation getReports_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
  self = [super init];
  __uuId = [uuId retain_stub];
  __uuId_isset = YES;
  __features = [features retain_stub];
  __features_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain_stub];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"features"])
  {
    __features = [[decoder decodeObjectForKey: @"features"] retain_stub];
    __features_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__features_isset)
  {
    [encoder encodeObject: __features forKey: @"features"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uuId_isset ? 2654435761 : 0;
  if (__uuId_isset)
  {
    hash = (hash * 31) ^ [__uuId hash];
  }
  hash = (hash * 31) ^ __features_isset ? 2654435761 : 0;
  if (__features_isset)
  {
    hash = (hash * 31) ^ [__features hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getReports_args class]]) {
    return NO;
  }
  getReports_args *other = (getReports_args *)anObject;
  if ((__uuId_isset != other->__uuId_isset) ||
      (__uuId_isset && ((__uuId || other->__uuId) && ![__uuId isEqual:other->__uuId]))) {
    return NO;
  }
  if ((__features_isset != other->__features_isset) ||
      (__features_isset && ((__features || other->__features) && ![__features isEqual:other->__features]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uuId release_stub];
  [__features release_stub];
  [super dealloc_stub];
}

- (NSString *) uuId {
  return [[__uuId retain_stub] autorelease_stub];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain_stub];
  [__uuId release_stub];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release_stub];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSMutableArray *) features {
  return [[__features retain_stub] autorelease_stub];
}

- (void) setFeatures: (NSMutableArray *) features {
  [features retain_stub];
  [__features release_stub];
  __features = features;
  __features_isset = YES;
}

- (BOOL) featuresIsSet {
  return __features_isset;
}

- (void) unsetFeatures {
  [__features release_stub];
  __features = nil;
  __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size55;
          [inProtocol readListBeginReturningElementType: NULL size: &_size55];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size55];
          int _i56;
          for (_i56 = 0; _i56 < _size55; ++_i56)
          {
            Feature *_elem57 = [[Feature alloc] init];
            [_elem57 read: inProtocol];
            [fieldValue addObject: _elem57];
            [_elem57 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeatures: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getReports_args"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__features_isset) {
    if (__features != nil) {
      [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
        int idx59;
        for (idx59 = 0; idx59 < [__features count]; idx59++)
        {
          [[__features objectAtIndex: idx59] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getReports_args("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",features:"];
  [ms appendFormat: @"%@", __features];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetReports_result : NSObject <TBase, NSCoding> {
  Reports * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Reports * success;
#endif

- (id) init;
- (id) initWithSuccess: (Reports *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Reports *) success;
- (void) setSuccess: (Reports *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetReports_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (Reports *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetReports_result class]]) {
    return NO;
  }
  GetReports_result *other = (GetReports_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (Reports *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (Reports *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Reports *fieldValue = [[Reports alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetReports_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetReports_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getHogOrBugReport_args : NSObject <TBase, NSCoding> {
  NSString * __uuId;
  FeatureList __features;

  BOOL __uuId_isset;
  BOOL __features_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=uuId, setter=setUuId:) NSString * uuId;
@property (nonatomic, retain, getter=features, setter=setFeatures:) FeatureList features;
#endif

- (id) init;
- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) uuId;
- (void) setUuId: (NSString *) uuId;
#endif
- (BOOL) uuIdIsSet;

#if !__has_feature(objc_arc)
- (FeatureList) features;
- (void) setFeatures: (FeatureList) features;
#endif
- (BOOL) featuresIsSet;

@end

@implementation getHogOrBugReport_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUuId: (NSString *) uuId features: (FeatureList) features
{
  self = [super init];
  __uuId = [uuId retain_stub];
  __uuId_isset = YES;
  __features = [features retain_stub];
  __features_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uuId"])
  {
    __uuId = [[decoder decodeObjectForKey: @"uuId"] retain_stub];
    __uuId_isset = YES;
  }
  if ([decoder containsValueForKey: @"features"])
  {
    __features = [[decoder decodeObjectForKey: @"features"] retain_stub];
    __features_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uuId_isset)
  {
    [encoder encodeObject: __uuId forKey: @"uuId"];
  }
  if (__features_isset)
  {
    [encoder encodeObject: __features forKey: @"features"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __uuId_isset ? 2654435761 : 0;
  if (__uuId_isset)
  {
    hash = (hash * 31) ^ [__uuId hash];
  }
  hash = (hash * 31) ^ __features_isset ? 2654435761 : 0;
  if (__features_isset)
  {
    hash = (hash * 31) ^ [__features hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getHogOrBugReport_args class]]) {
    return NO;
  }
  getHogOrBugReport_args *other = (getHogOrBugReport_args *)anObject;
  if ((__uuId_isset != other->__uuId_isset) ||
      (__uuId_isset && ((__uuId || other->__uuId) && ![__uuId isEqual:other->__uuId]))) {
    return NO;
  }
  if ((__features_isset != other->__features_isset) ||
      (__features_isset && ((__features || other->__features) && ![__features isEqual:other->__features]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__uuId release_stub];
  [__features release_stub];
  [super dealloc_stub];
}

- (NSString *) uuId {
  return [[__uuId retain_stub] autorelease_stub];
}

- (void) setUuId: (NSString *) uuId {
  [uuId retain_stub];
  [__uuId release_stub];
  __uuId = uuId;
  __uuId_isset = YES;
}

- (BOOL) uuIdIsSet {
  return __uuId_isset;
}

- (void) unsetUuId {
  [__uuId release_stub];
  __uuId = nil;
  __uuId_isset = NO;
}

- (NSMutableArray *) features {
  return [[__features retain_stub] autorelease_stub];
}

- (void) setFeatures: (NSMutableArray *) features {
  [features retain_stub];
  [__features release_stub];
  __features = features;
  __features_isset = YES;
}

- (BOOL) featuresIsSet {
  return __features_isset;
}

- (void) unsetFeatures {
  [__features release_stub];
  __features = nil;
  __features_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUuId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size60;
          [inProtocol readListBeginReturningElementType: NULL size: &_size60];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size60];
          int _i61;
          for (_i61 = 0; _i61 < _size60; ++_i61)
          {
            Feature *_elem62 = [[Feature alloc] init];
            [_elem62 read: inProtocol];
            [fieldValue addObject: _elem62];
            [_elem62 release_stub];
          }
          [inProtocol readListEnd];
          [self setFeatures: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
  if (__uuId_isset) {
    if (__uuId != nil) {
      [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __uuId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__features_isset) {
    if (__features != nil) {
      [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__features count]];
        int idx64;
        for (idx64 = 0; idx64 < [__features count]; idx64++)
        {
          [[__features objectAtIndex: idx64] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getHogOrBugReport_args("];
  [ms appendString: @"uuId:"];
  [ms appendFormat: @"\"%@\"", __uuId];
  [ms appendString: @",features:"];
  [ms appendFormat: @"%@", __features];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetHogOrBugReport_result : NSObject <TBase, NSCoding> {
  HogBugReport * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HogBugReport * success;
#endif

- (id) init;
- (id) initWithSuccess: (HogBugReport *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (HogBugReport *) success;
- (void) setSuccess: (HogBugReport *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetHogOrBugReport_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (HogBugReport *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetHogOrBugReport_result class]]) {
    return NO;
  }
  GetHogOrBugReport_result *other = (GetHogOrBugReport_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (HogBugReport *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (HogBugReport *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          HogBugReport *fieldValue = [[HogBugReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetHogOrBugReport_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetHogOrBugReport_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getQuickHogsAndMaybeRegister_args : NSObject <TBase, NSCoding> {
  Registration * __registration;
  NSMutableArray * __processList;

  BOOL __registration_isset;
  BOOL __processList_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=registration, setter=setRegistration:) Registration * registration;
@property (nonatomic, retain, getter=processList, setter=setProcessList:) NSMutableArray * processList;
#endif

- (id) init;
- (id) initWithRegistration: (Registration *) registration processList: (NSMutableArray *) processList;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Registration *) registration;
- (void) setRegistration: (Registration *) registration;
#endif
- (BOOL) registrationIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) processList;
- (void) setProcessList: (NSMutableArray *) processList;
#endif
- (BOOL) processListIsSet;

@end

@implementation getQuickHogsAndMaybeRegister_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRegistration: (Registration *) registration processList: (NSMutableArray *) processList
{
  self = [super init];
  __registration = [registration retain_stub];
  __registration_isset = YES;
  __processList = [processList retain_stub];
  __processList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"registration"])
  {
    __registration = [[decoder decodeObjectForKey: @"registration"] retain_stub];
    __registration_isset = YES;
  }
  if ([decoder containsValueForKey: @"processList"])
  {
    __processList = [[decoder decodeObjectForKey: @"processList"] retain_stub];
    __processList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__registration_isset)
  {
    [encoder encodeObject: __registration forKey: @"registration"];
  }
  if (__processList_isset)
  {
    [encoder encodeObject: __processList forKey: @"processList"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __registration_isset ? 2654435761 : 0;
  if (__registration_isset)
  {
    hash = (hash * 31) ^ [__registration hash];
  }
  hash = (hash * 31) ^ __processList_isset ? 2654435761 : 0;
  if (__processList_isset)
  {
    hash = (hash * 31) ^ [__processList hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[getQuickHogsAndMaybeRegister_args class]]) {
    return NO;
  }
  getQuickHogsAndMaybeRegister_args *other = (getQuickHogsAndMaybeRegister_args *)anObject;
  if ((__registration_isset != other->__registration_isset) ||
      (__registration_isset && ((__registration || other->__registration) && ![__registration isEqual:other->__registration]))) {
    return NO;
  }
  if ((__processList_isset != other->__processList_isset) ||
      (__processList_isset && ((__processList || other->__processList) && ![__processList isEqual:other->__processList]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__registration release_stub];
  [__processList release_stub];
  [super dealloc_stub];
}

- (Registration *) registration {
  return [[__registration retain_stub] autorelease_stub];
}

- (void) setRegistration: (Registration *) registration {
  [registration retain_stub];
  [__registration release_stub];
  __registration = registration;
  __registration_isset = YES;
}

- (BOOL) registrationIsSet {
  return __registration_isset;
}

- (void) unsetRegistration {
  [__registration release_stub];
  __registration = nil;
  __registration_isset = NO;
}

- (NSMutableArray *) processList {
  return [[__processList retain_stub] autorelease_stub];
}

- (void) setProcessList: (NSMutableArray *) processList {
  [processList retain_stub];
  [__processList release_stub];
  __processList = processList;
  __processList_isset = YES;
}

- (BOOL) processListIsSet {
  return __processList_isset;
}

- (void) unsetProcessList {
  [__processList release_stub];
  __processList = nil;
  __processList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Registration *fieldValue = [[Registration alloc] init];
          [fieldValue read: inProtocol];
          [self setRegistration: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size65;
          [inProtocol readListBeginReturningElementType: NULL size: &_size65];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size65];
          int _i66;
          for (_i66 = 0; _i66 < _size65; ++_i66)
          {
            NSString * _elem67 = [inProtocol readString];
            [fieldValue addObject: _elem67];
          }
          [inProtocol readListEnd];
          [self setProcessList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getQuickHogsAndMaybeRegister_args"];
  if (__registration_isset) {
    if (__registration != nil) {
      [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
      [__registration write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__processList_isset) {
    if (__processList != nil) {
      [outProtocol writeFieldBeginWithName: @"processList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__processList count]];
        int idx69;
        for (idx69 = 0; idx69 < [__processList count]; idx69++)
        {
          [outProtocol writeString: [__processList objectAtIndex: idx69]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getQuickHogsAndMaybeRegister_args("];
  [ms appendString: @"registration:"];
  [ms appendFormat: @"%@", __registration];
  [ms appendString: @",processList:"];
  [ms appendFormat: @"%@", __processList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetQuickHogsAndMaybeRegister_result : NSObject <TBase, NSCoding> {
  HogBugReport * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) HogBugReport * success;
#endif

- (id) init;
- (id) initWithSuccess: (HogBugReport *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (HogBugReport *) success;
- (void) setSuccess: (HogBugReport *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetQuickHogsAndMaybeRegister_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (HogBugReport *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetQuickHogsAndMaybeRegister_result class]]) {
    return NO;
  }
  GetQuickHogsAndMaybeRegister_result *other = (GetQuickHogsAndMaybeRegister_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (HogBugReport *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (HogBugReport *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          HogBugReport *fieldValue = [[HogBugReport alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetQuickHogsAndMaybeRegister_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetQuickHogsAndMaybeRegister_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CaratServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_registerMe: (Registration *) registration
{
  [outProtocol writeMessageBeginWithName: @"registerMe" type: TMessageType_ONEWAY sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"registerMe_args"];
  if (registration != nil)  {
    [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
    [registration write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (void) registerMe: (Registration *) registration
{
  [self send_registerMe : registration];
  [[outProtocol transport] flush];
}

- (void) send_uploadSample: (Sample *) sample
{
  [outProtocol writeMessageBeginWithName: @"uploadSample" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uploadSample_args"];
  if (sample != nil)  {
    [outProtocol writeFieldBeginWithName: @"sample" type: TType_STRUCT fieldID: 1];
    [sample write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (BOOL) recv_uploadSample
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UploadSample_result * result = [[[UploadSample_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uploadSample failed: unknown result"];
}

- (BOOL) uploadSample: (Sample *) sample
{
  [self send_uploadSample : sample];
  [[outProtocol transport] flush];
  return [self recv_uploadSample];
}

- (void) send_getReports: (NSString *) uuId features: (FeatureList) features
{
  [outProtocol writeMessageBeginWithName: @"getReports" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getReports_args"];
  if (uuId != nil)  {
    [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: uuId];
    [outProtocol writeFieldEnd];
  }
  if (features != nil)  {
    [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
      int idx71;
      for (idx71 = 0; idx71 < [features count]; idx71++)
      {
        [[features objectAtIndex: idx71] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (Reports *) recv_getReports
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetReports_result * result = [[[GetReports_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getReports failed: unknown result"];
}

- (Reports *) getReports: (NSString *) uuId features: (FeatureList) features
{
  [self send_getReports : uuId features: features];
  [[outProtocol transport] flush];
  return [self recv_getReports];
}

- (void) send_getHogOrBugReport: (NSString *) uuId features: (FeatureList) features
{
  [outProtocol writeMessageBeginWithName: @"getHogOrBugReport" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getHogOrBugReport_args"];
  if (uuId != nil)  {
    [outProtocol writeFieldBeginWithName: @"uuId" type: TType_STRING fieldID: 1];
    [outProtocol writeString: uuId];
    [outProtocol writeFieldEnd];
  }
  if (features != nil)  {
    [outProtocol writeFieldBeginWithName: @"features" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [features count]];
      int idx73;
      for (idx73 = 0; idx73 < [features count]; idx73++)
      {
        [[features objectAtIndex: idx73] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (HogBugReport *) recv_getHogOrBugReport
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetHogOrBugReport_result * result = [[[GetHogOrBugReport_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getHogOrBugReport failed: unknown result"];
}

- (HogBugReport *) getHogOrBugReport: (NSString *) uuId features: (FeatureList) features
{
  [self send_getHogOrBugReport : uuId features: features];
  [[outProtocol transport] flush];
  return [self recv_getHogOrBugReport];
}

- (void) send_getQuickHogsAndMaybeRegister: (Registration *) registration processList: (NSMutableArray *) processList
{
  [outProtocol writeMessageBeginWithName: @"getQuickHogsAndMaybeRegister" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getQuickHogsAndMaybeRegister_args"];
  if (registration != nil)  {
    [outProtocol writeFieldBeginWithName: @"registration" type: TType_STRUCT fieldID: 1];
    [registration write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (processList != nil)  {
    [outProtocol writeFieldBeginWithName: @"processList" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_STRING size: [processList count]];
      int idx75;
      for (idx75 = 0; idx75 < [processList count]; idx75++)
      {
        [outProtocol writeString: [processList objectAtIndex: idx75]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (HogBugReport *) recv_getQuickHogsAndMaybeRegister
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetQuickHogsAndMaybeRegister_result * result = [[[GetQuickHogsAndMaybeRegister_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getQuickHogsAndMaybeRegister failed: unknown result"];
}

- (HogBugReport *) getQuickHogsAndMaybeRegister: (Registration *) registration processList: (NSMutableArray *) processList
{
  [self send_getQuickHogsAndMaybeRegister : registration processList: processList];
  [[outProtocol transport] flush];
  return [self recv_getQuickHogsAndMaybeRegister];
}

@end

@implementation CaratServiceProcessor

- (id) initWithCaratService: (id <CaratService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_registerMe_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"registerMe"];
}
{
  SEL s = @selector(process_uploadSample_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"uploadSample"];
}
{
  SEL s = @selector(process_getReports_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getReports"];
}
{
  SEL s = @selector(process_getHogOrBugReport_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getHogOrBugReport"];
}
{
  SEL s = @selector(process_getQuickHogsAndMaybeRegister_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getQuickHogsAndMaybeRegister"];
}
return self;
}

- (id<CaratService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_registerMe_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
registerMe_args * args = [[registerMe_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService registerMe: [args registration]];
[args release_stub];
}

- (void) process_uploadSample_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
uploadSample_args * args = [[uploadSample_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UploadSample_result * result = [[UploadSample_result alloc] init];
[result setSuccess: [mService uploadSample: [args sample]]];
[outProtocol writeMessageBeginWithName: @"uploadSample"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getReports_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getReports_args * args = [[getReports_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetReports_result * result = [[GetReports_result alloc] init];
[result setSuccess: [mService getReports: [args uuId] features: [args features]]];
[outProtocol writeMessageBeginWithName: @"getReports"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getHogOrBugReport_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getHogOrBugReport_args * args = [[getHogOrBugReport_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetHogOrBugReport_result * result = [[GetHogOrBugReport_result alloc] init];
[result setSuccess: [mService getHogOrBugReport: [args uuId] features: [args features]]];
[outProtocol writeMessageBeginWithName: @"getHogOrBugReport"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getQuickHogsAndMaybeRegister_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getQuickHogsAndMaybeRegister_args * args = [[getQuickHogsAndMaybeRegister_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetQuickHogsAndMaybeRegister_result * result = [[GetQuickHogsAndMaybeRegister_result alloc] init];
[result setSuccess: [mService getQuickHogsAndMaybeRegister: [args registration] processList: [args processList]]];
[outProtocol writeMessageBeginWithName: @"getQuickHogsAndMaybeRegister"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

